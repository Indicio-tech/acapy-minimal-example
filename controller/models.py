# generated by datamodel-codegen:
#   filename:  https://raw.githubusercontent.com/Indicio-tech/acapy-openapi/main/openapi.yml
#   timestamp: 2023-07-18T15:48:23+00:00

from __future__ import annotations

from datetime import datetime
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Extra, Field
from typing_extensions import Literal


class AMLRecord(BaseModel):
    class Config:
        allow_population_by_field_name = True

    aml: Optional[Dict[str, str]] = None
    aml_context: Optional[str] = Field(None, alias="amlContext")
    version: Optional[str] = None


class ActionMenuModulesResult(BaseModel):
    pass

    class Config:
        allow_population_by_field_name = True


class AdminConfig(BaseModel):
    class Config:
        allow_population_by_field_name = True

    config: Dict[str, Any] = Field(..., description="Configuration settings")


class AdminMediationDeny(BaseModel):
    class Config:
        allow_population_by_field_name = True

    mediator_terms: Optional[List[str]] = Field(
        None, description="List of mediator rules for recipient"
    )
    recipient_terms: Optional[List[str]] = Field(
        None, description="List of recipient rules for mediation"
    )


class AdminModules(BaseModel):
    class Config:
        allow_population_by_field_name = True

    result: Optional[List[str]] = Field(None, description="List of admin modules")


class AdminReset(ActionMenuModulesResult):
    pass


class AdminShutdown(ActionMenuModulesResult):
    pass


class AdminStatus(BaseModel):
    class Config:
        allow_population_by_field_name = True

    conductor: Optional[Dict[str, Any]] = Field(
        None, description="Conductor statistics"
    )
    label: Optional[str] = Field(None, description="Default label")
    timing: Optional[Dict[str, Any]] = Field(None, description="Timing results")
    version: Optional[str] = Field(None, description="Version code")


class AdminStatusLiveliness(BaseModel):
    class Config:
        allow_population_by_field_name = True

    alive: Optional[bool] = Field(None, description="Liveliness status", example=True)


class AdminStatusReadiness(BaseModel):
    class Config:
        allow_population_by_field_name = True

    ready: Optional[bool] = Field(None, description="Readiness status", example=True)


class AttachDecoratorDataJWSHeader(BaseModel):
    class Config:
        allow_population_by_field_name = True

    kid: str = Field(
        ...,
        description="Key identifier, in W3C did:key or DID URL format",
        example="did:sov:LjgpST2rjsoxYegQDRm7EL#keys-4",
        regex="^did:(?:key:z[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]+|sov:[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}(;.*)?(\\?.*)?#.+)$",
    )


class AttachmentDef(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: Optional[str] = Field(
        None, description="Attachment identifier", example="attachment-0"
    )
    type: Optional[Literal["credential-offer", "present-proof"]] = Field(
        None, description="Attachment type", example="present-proof"
    )


class AttributeMimeTypesResult(BaseModel):
    class Config:
        allow_population_by_field_name = True

    results: Optional[Dict[str, str]] = None


class BasicMessageModuleResponse(ActionMenuModulesResult):
    pass


class ClaimFormat(BaseModel):
    class Config:
        allow_population_by_field_name = True

    jwt: Optional[Dict[str, Any]] = None
    jwt_vc: Optional[Dict[str, Any]] = None
    jwt_vp: Optional[Dict[str, Any]] = None
    ldp: Optional[Dict[str, Any]] = None
    ldp_vc: Optional[Dict[str, Any]] = None
    ldp_vp: Optional[Dict[str, Any]] = None


class PurgeItem(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: str = Field(
        ...,
        description="Credential revocation identifier",
        example="12345",
        regex="^[1-9][0-9]*$",
    )


class ClearPendingRevocationsRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    purge: Optional[Dict[str, List[PurgeItem]]] = Field(
        None,
        description="Credential revocation ids by revocation registry id: omit for all, specify null or empty list for all pending per revocation registry",
    )


class ConnRecord(BaseModel):
    class Config:
        allow_population_by_field_name = True

    accept: Optional[Literal["manual", "auto"]] = Field(
        None, description="Connection acceptance: manual or auto", example="auto"
    )
    alias: Optional[str] = Field(
        None,
        description="Optional alias to apply to connection for later use",
        example="Bob, providing quotes",
    )
    connection_id: str = Field(
        ...,
        description="Connection identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    connection_protocol: Optional[
        Literal["connections/1.0", "didexchange/1.0"]
    ] = Field(None, description="Connection protocol used", example="connections/1.0")
    created_at: Optional[str] = Field(
        None,
        description="Time of record creation",
        example="2021-12-31 23:59:59+00:00",
        regex="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    error_msg: Optional[str] = Field(
        None,
        description="Error message",
        example="No DIDDoc provided; cannot connect to public DID",
    )
    inbound_connection_id: Optional[str] = Field(
        None,
        description="Inbound routing connection id to use",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    invitation_key: Optional[str] = Field(
        None,
        description="Public key for connection",
        example="H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
        regex="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$",
    )
    invitation_mode: Optional[Literal["once", "multi", "static"]] = Field(
        None, description="Invitation mode", example="once"
    )
    invitation_msg_id: Optional[str] = Field(
        None,
        description="ID of out-of-band invitation message",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    my_did: Optional[str] = Field(
        None,
        description="Our DID for connection",
        example="WgWxqztrNooG92RXvxSTWv",
        regex="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )
    request_id: Optional[str] = Field(
        None,
        description="Connection request identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    rfc23_state: Optional[str] = Field(
        None, description="State per RFC 23", example="invitation-sent"
    )
    routing_state: Optional[Literal["none", "request", "active", "error"]] = Field(
        None, description="Routing state of connection", example="active"
    )
    state: Optional[str] = Field(
        None, description="Current record state", example="active"
    )
    their_did: Optional[str] = Field(
        None,
        description="Their DID for connection",
        example="WgWxqztrNooG92RXvxSTWv",
        regex="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )
    their_label: Optional[str] = Field(
        None, description="Their label for connection", example="Bob"
    )
    their_public_did: Optional[str] = Field(
        None,
        description="Other agent's public DID for connection",
        example="2cpBmR3FqGKWi5EyUbpRY8",
    )
    their_role: Optional[
        Literal["invitee", "requester", "inviter", "responder"]
    ] = Field(
        None, description="Their role in the connection protocol", example="requester"
    )
    updated_at: Optional[str] = Field(
        None,
        description="Time of last record update",
        example="2021-12-31 23:59:59+00:00",
        regex="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )


class RecipientKey(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: str = Field(
        ...,
        description="Recipient public key",
        example="H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
        regex="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$",
    )


class RoutingKey(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: str = Field(
        ...,
        description="Routing key",
        example="H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
        regex="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$",
    )


class ConnectionInvitation(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        example="https://didcomm.org/my-family/1.0/my-message-type",
    )
    did: Optional[str] = Field(
        None,
        description="DID for connection invitation",
        example="WgWxqztrNooG92RXvxSTWv",
        regex="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )
    image_url: Optional[str] = Field(
        None,
        alias="imageUrl",
        description="Optional image URL for connection invitation",
        example="http://192.168.56.101/img/logo.jpg",
    )
    label: Optional[str] = Field(
        None, description="Optional label for connection invitation", example="Bob"
    )
    recipient_keys: Optional[List[RecipientKey]] = Field(
        None, alias="recipientKeys", description="List of recipient keys"
    )
    routing_keys: Optional[List[RoutingKey]] = Field(
        None, alias="routingKeys", description="List of routing keys"
    )
    service_endpoint: Optional[str] = Field(
        None,
        alias="serviceEndpoint",
        description="Service endpoint at which to reach this agent",
        example="http://192.168.56.101:8020",
    )


class ConnectionList(BaseModel):
    class Config:
        allow_population_by_field_name = True

    results: List[ConnRecord] = Field(..., description="List of connection records")


class ConnectionMetadata(BaseModel):
    class Config:
        allow_population_by_field_name = True

    results: Optional[Dict[str, Any]] = Field(
        None, description="Dictionary of metadata associated with connection."
    )


class ConnectionMetadataSetRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    metadata: Dict[str, Any] = Field(
        ..., description="Dictionary of metadata to set for connection."
    )


class ConnectionModuleResponse(ActionMenuModulesResult):
    pass


class ConnectionStaticRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    alias: Optional[str] = Field(None, description="Alias to assign to this connection")
    my_did: Optional[str] = Field(
        None,
        description="Local DID",
        example="WgWxqztrNooG92RXvxSTWv",
        regex="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )
    my_seed: Optional[str] = Field(None, description="Seed to use for the local DID")
    their_did: Optional[str] = Field(
        None,
        description="Remote DID",
        example="WgWxqztrNooG92RXvxSTWv",
        regex="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )
    their_endpoint: Optional[str] = Field(
        None,
        description="URL endpoint for other party",
        example="https://myhost:8021",
        regex="^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$",
    )
    their_label: Optional[str] = Field(
        None, description="Other party's label for this connection"
    )
    their_seed: Optional[str] = Field(
        None, description="Seed to use for the remote DID"
    )
    their_verkey: Optional[str] = Field(None, description="Remote verification key")


class ConnectionStaticResult(BaseModel):
    class Config:
        allow_population_by_field_name = True

    my_did: str = Field(
        ...,
        description="Local DID",
        example="WgWxqztrNooG92RXvxSTWv",
        regex="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )
    my_endpoint: str = Field(
        ...,
        description="My URL endpoint",
        example="https://myhost:8021",
        regex="^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$",
    )
    my_verkey: str = Field(
        ...,
        description="My verification key",
        example="H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
        regex="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$",
    )
    record: ConnRecord
    their_did: str = Field(
        ...,
        description="Remote DID",
        example="WgWxqztrNooG92RXvxSTWv",
        regex="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )
    their_verkey: str = Field(
        ...,
        description="Remote verification key",
        example="H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
        regex="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$",
    )


class CreateInvitationRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    mediation_id: Optional[str] = Field(
        None,
        description="Identifier for active mediation record to be used",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
        regex="[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description="Optional metadata to attach to the connection created with the invitation",
    )
    my_label: Optional[str] = Field(
        None, description="Optional label for connection invitation", example="Bob"
    )
    recipient_keys: Optional[List[RecipientKey]] = Field(
        None, description="List of recipient keys"
    )
    routing_keys: Optional[List[RoutingKey]] = Field(
        None, description="List of routing keys"
    )
    service_endpoint: Optional[str] = Field(
        None, description="Connection endpoint", example="http://192.168.56.102:8020"
    )


class CreateWalletRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    extra_settings: Optional[Dict[str, Any]] = Field(
        None, description="Agent config key-value pairs"
    )
    image_url: Optional[str] = Field(
        None,
        description="Image url for this wallet. This image url is publicized            (self-attested) to other agents as part of forming a connection.",
        example="https://aries.ca/images/sample.png",
    )
    key_management_mode: Optional[Literal["managed"]] = Field(
        None,
        description="Key management method to use for this wallet.",
        example="managed",
    )
    label: Optional[str] = Field(
        None,
        description="Label for this wallet. This label is publicized            (self-attested) to other agents as part of forming a connection.",
        example="Alice",
    )
    wallet_dispatch_type: Optional[Literal["default", "both", "base"]] = Field(
        None,
        description="Webhook target dispatch type for this wallet.             default - Dispatch only to webhooks associated with this wallet.             base - Dispatch only to webhooks associated with the base wallet.             both - Dispatch to both webhook targets.",
        example="default",
    )
    wallet_key: Optional[str] = Field(
        None,
        description="Master key used for key derivation.",
        example="MySecretKey123",
    )
    wallet_key_derivation: Optional[
        Literal["ARGON2I_MOD", "ARGON2I_INT", "RAW"]
    ] = Field(None, description="Key derivation", example="RAW")
    wallet_name: Optional[str] = Field(
        None, description="Wallet name", example="MyNewWallet"
    )
    wallet_type: Optional[Literal["askar", "in_memory", "indy"]] = Field(
        None, description="Type of the wallet to create", example="indy"
    )
    wallet_webhook_urls: Optional[List[str]] = Field(
        None, description="List of Webhook URLs associated with this subwallet"
    )


class CreateWalletResponse(BaseModel):
    class Config:
        allow_population_by_field_name = True

    created_at: Optional[str] = Field(
        None,
        description="Time of record creation",
        example="2021-12-31 23:59:59+00:00",
        regex="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    key_management_mode: Literal["managed", "unmanaged"] = Field(
        ..., description="Mode regarding management of wallet key"
    )
    settings: Optional[Dict[str, Any]] = Field(
        None, description="Settings for this wallet."
    )
    state: Optional[str] = Field(
        None, description="Current record state", example="active"
    )
    token: Optional[str] = Field(
        None,
        description="Authorization token to authenticate wallet requests",
        example="eyJhbGciOiJFZERTQSJ9.eyJhIjogIjAifQ.dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk",
    )
    updated_at: Optional[str] = Field(
        None,
        description="Time of last record update",
        example="2021-12-31 23:59:59+00:00",
        regex="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    wallet_id: str = Field(
        ...,
        description="Wallet record ID",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )


class CreateWalletTokenRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    wallet_key: Optional[str] = Field(
        None,
        description="Master key used for key derivation. Only required for             unamanged wallets.",
        example="MySecretKey123",
    )


class CreateWalletTokenResponse(BaseModel):
    class Config:
        allow_population_by_field_name = True

    token: Optional[str] = Field(
        None,
        description="Authorization token to authenticate wallet requests",
        example="eyJhbGciOiJFZERTQSJ9.eyJhIjogIjAifQ.dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk",
    )


class CredAttrSpec(BaseModel):
    class Config:
        allow_population_by_field_name = True

    mime_type: Optional[str] = Field(
        None,
        alias="mime-type",
        description="MIME type: omit for (null) default",
        example="image/jpeg",
    )
    name: str = Field(..., description="Attribute name", example="favourite_drink")
    value: str = Field(
        ...,
        description="Attribute value: base64-encode if MIME type is present",
        example="martini",
    )


class CredDefValueRevocation(BaseModel):
    class Config:
        allow_population_by_field_name = True

    g: Optional[str] = Field(None, example="1 1F14F&ECB578F 2 095E45DDF417D")
    g_dash: Optional[str] = Field(
        None, example="1 1D64716fCDC00C 1 0C781960FA66E3D3 2 095E45DDF417D"
    )
    h: Optional[str] = Field(None, example="1 16675DAE54BFAE8 2 095E45DD417D")
    h0: Optional[str] = Field(None, example="1 21E5EF9476EAF18 2 095E45DDF417D")
    h1: Optional[str] = Field(None, example="1 236D1D99236090 2 095E45DDF417D")
    h2: Optional[str] = Field(None, example="1 1C3AE8D1F1E277 2 095E45DDF417D")
    h_cap: Optional[str] = Field(
        None, example="1 1B2A32CF3167 1 2490FEBF6EE55 1 0000000000000000"
    )
    htilde: Optional[str] = Field(None, example="1 1D8549E8C0F8 2 095E45DDF417D")
    pk: Optional[str] = Field(
        None, example="1 142CD5E5A7DC 1 153885BD903312 2 095E45DDF417D"
    )
    u: Optional[str] = Field(
        None, example="1 0C430AAB2B4710 1 1CB3A0932EE7E 1 0000000000000000"
    )
    y: Optional[str] = Field(
        None, example="1 153558BD903312 2 095E45DDF417D 1 0000000000000000"
    )


class CredRevIndyRecordsResult(BaseModel):
    class Config:
        allow_population_by_field_name = True

    rev_reg_delta: Optional[Dict[str, Any]] = Field(
        None, description="Indy revocation registry delta"
    )


class CredRevokedResult(BaseModel):
    class Config:
        allow_population_by_field_name = True

    revoked: Optional[bool] = Field(
        None, description="Whether credential is revoked on the ledger"
    )


class CredentialDefinitionSendRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    revocation_registry_size: Optional[int] = Field(
        None, description="Revocation registry size", example=1000, ge=4, le=32768
    )
    schema_id: Optional[str] = Field(
        None,
        description="Schema identifier",
        example="WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
        regex="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
    )
    support_revocation: Optional[bool] = Field(
        None, description="Revocation supported flag"
    )
    tag: Optional[str] = Field(
        None, description="Credential definition identifier tag", example="default"
    )


class CredentialDefinitionSendResult(BaseModel):
    class Config:
        allow_population_by_field_name = True

    credential_definition_id: str = Field(
        ...,
        description="Credential definition identifier",
        example="WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
        regex="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )


class CredentialDefinitionId(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: str = Field(
        ...,
        description="Credential definition identifiers",
        example="WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
        regex="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )


class CredentialDefinitionsCreatedResult(BaseModel):
    class Config:
        allow_population_by_field_name = True

    credential_definition_ids: Optional[List[CredentialDefinitionId]] = None


class CredentialPreview(BaseModel):
    class Config:
        allow_population_by_field_name = True

    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type identifier",
        example="issue-credential/1.0/credential-preview",
    )
    attributes: List[CredAttrSpec]


class CredentialProposal(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        example="https://didcomm.org/my-family/1.0/my-message-type",
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    cred_def_id: Optional[str] = Field(
        None,
        example="WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
        regex="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    credential_proposal: Optional[CredentialPreview] = None
    issuer_did: Optional[str] = Field(
        None,
        example="WgWxqztrNooG92RXvxSTWv",
        regex="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )
    schema_id: Optional[str] = Field(
        None,
        example="WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
        regex="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
    )
    schema_issuer_did: Optional[str] = Field(
        None,
        example="WgWxqztrNooG92RXvxSTWv",
        regex="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )
    schema_name: Optional[str] = None
    schema_version: Optional[str] = Field(None, example="1.0", regex="^[0-9.]+$")


class CredentialStatusOptions(BaseModel):
    class Config:
        allow_population_by_field_name = True

    type: str = Field(
        ...,
        description="Credential status method type to use for the credential. Should match status method registered in the Verifiable Credential Extension Registry",
        example="CredentialStatusList2017",
    )


class DID(BaseModel):
    class Config:
        allow_population_by_field_name = True

    did: str = Field(
        ...,
        description="DID of interest",
        example="did:peer:WgWxqztrNooG92RXvxSTWv",
        regex="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$|^did:([a-zA-Z0-9_]+):([a-zA-Z0-9_.%-]+(:[a-zA-Z0-9_.%-]+)*)((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(\\/[^#?]*)?([?][^#]*)?(\\#.*)?$$",
    )
    key_type: Literal["ed25519", "bls12381g2"] = Field(
        ..., description="Key type associated with the DID", example="ed25519"
    )
    method: str = Field(
        ..., description="Did method associated with the DID", example="sov"
    )
    posture: Literal["public", "posted", "wallet_only"] = Field(
        ...,
        description="Whether DID is current public DID, posted to ledger but not current public DID, or local to the wallet",
        example="wallet_only",
    )
    verkey: str = Field(
        ...,
        description="Public verification key",
        example="H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
        regex="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$",
    )


class DIDCreateOptions(BaseModel):
    class Config:
        allow_population_by_field_name = True

    did: Optional[str] = Field(
        None,
        description="Specify final value of the did (including did:<method>: prefix)if the method supports or requires so.",
        example="did:peer:WgWxqztrNooG92RXvxSTWv",
        regex="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$|^did:([a-zA-Z0-9_]+):([a-zA-Z0-9_.%-]+(:[a-zA-Z0-9_.%-]+)*)((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(\\/[^#?]*)?([?][^#]*)?(\\#.*)?$$",
    )
    key_type: Literal["ed25519", "bls12381g2"] = Field(
        ...,
        description="Key type to use for the DID keypair. Validated with the chosen DID method's supported key types.",
        example="ed25519",
    )


class DIDEndpoint(BaseModel):
    class Config:
        allow_population_by_field_name = True

    did: str = Field(
        ...,
        description="DID of interest",
        example="WgWxqztrNooG92RXvxSTWv",
        regex="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )
    endpoint: Optional[str] = Field(
        None,
        description="Endpoint to set (omit to delete)",
        example="https://myhost:8021",
        regex="^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$",
    )


class DIDEndpointWithType(BaseModel):
    class Config:
        allow_population_by_field_name = True

    did: str = Field(
        ...,
        description="DID of interest",
        example="WgWxqztrNooG92RXvxSTWv",
        regex="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )
    endpoint: Optional[str] = Field(
        None,
        description="Endpoint to set (omit to delete)",
        example="https://myhost:8021",
        regex="^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$",
    )
    endpoint_type: Optional[Literal["Endpoint", "Profile", "LinkedDomains"]] = Field(
        None,
        description="Endpoint type to set (default 'Endpoint'); affects only public or posted DIDs",
        example="Endpoint",
    )


class DIDList(BaseModel):
    class Config:
        allow_population_by_field_name = True

    results: Optional[List[DID]] = Field(None, description="DID list")


class DIDResult(BaseModel):
    class Config:
        allow_population_by_field_name = True

    result: Optional[DID] = None


class FieldIdItem(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: str = Field(
        ...,
        description="FieldID",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
        regex="[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
    )


class DIFHolder(BaseModel):
    class Config:
        allow_population_by_field_name = True

    directive: Optional[Literal["required", "preferred"]] = Field(
        None, description="Preference"
    )
    field_id: Optional[List[FieldIdItem]] = None


class DIFOptions(BaseModel):
    class Config:
        allow_population_by_field_name = True

    challenge: Optional[str] = Field(
        None,
        description="Challenge protect against replay attack",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
        regex="[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
    )
    domain: Optional[str] = Field(
        None, description="Domain protect against replay attack", example="4jt78h47fh47"
    )


class Date(BaseModel):
    class Config:
        allow_population_by_field_name = True

    expires_time: datetime = Field(
        ..., description="Expiry Date", example="2021-03-29 05:22:19+00:00"
    )


class Disclosures(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        example="https://didcomm.org/my-family/1.0/my-message-type",
    )
    disclosures: List[Dict[str, Any]] = Field(
        ..., description="List of protocol or goal_code descriptors"
    )


class EndorserInfo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    endorser_did: str = Field(..., description="Endorser DID")
    endorser_name: Optional[str] = Field(None, description="Endorser Name")


class EndpointsResult(BaseModel):
    class Config:
        allow_population_by_field_name = True

    my_endpoint: Optional[str] = Field(
        None,
        description="My endpoint",
        example="https://myhost:8021",
        regex="^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$",
    )
    their_endpoint: Optional[str] = Field(
        None,
        description="Their endpoint",
        example="https://myhost:8021",
        regex="^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$",
    )


class Filter(BaseModel):
    class Config:
        allow_population_by_field_name = True

    const: Optional[Union[str, float, int, bool, List, Dict[str, Any]]] = Field(
        None, description="Const"
    )
    enum: Optional[List[Dict[str, Any]]] = None
    exclusive_maximum: Optional[Dict[str, Any]] = Field(
        None, alias="exclusiveMaximum", description="ExclusiveMaximum"
    )
    exclusive_minimum: Optional[Dict[str, Any]] = Field(
        None, alias="exclusiveMinimum", description="ExclusiveMinimum"
    )
    format: Optional[str] = Field(None, description="Format")
    max_length: Optional[int] = Field(
        None, alias="maxLength", description="Max Length", example=1234
    )
    maximum: Optional[Dict[str, Any]] = Field(None, description="Maximum")
    min_length: Optional[int] = Field(
        None, alias="minLength", description="Min Length", example=1234
    )
    minimum: Optional[Dict[str, Any]] = Field(None, description="Minimum")
    not_: Optional[bool] = Field(None, alias="not", description="Not", example=False)
    pattern: Optional[str] = Field(None, description="Pattern")
    type: Optional[str] = Field(None, description="Type")


class Generated(BaseModel):
    class Config:
        allow_population_by_field_name = True

    master_secret: Optional[str] = Field(None, example="0", regex="^[0-9]*$")
    number: Optional[str] = Field(None, example="0", regex="^[0-9]*$")
    remainder: Optional[str] = Field(None, example="0", regex="^[0-9]*$")


class GetDIDEndpointResponse(BaseModel):
    class Config:
        allow_population_by_field_name = True

    endpoint: Optional[str] = Field(
        None,
        description="Full verification key",
        example="https://myhost:8021",
        regex="^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$",
    )


class GetDIDVerkeyResponse(BaseModel):
    class Config:
        allow_population_by_field_name = True

    verkey: Optional[str] = Field(
        None,
        description="Full verification key",
        example="H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
        regex="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$",
    )


class GetNymRoleResponse(BaseModel):
    class Config:
        allow_population_by_field_name = True

    role: Optional[
        Literal[
            "STEWARD", "TRUSTEE", "ENDORSER", "NETWORK_MONITOR", "USER", "ROLE_REMOVE"
        ]
    ] = Field(None, description="Ledger role", example="ENDORSER")


class HolderModuleResponse(ActionMenuModulesResult):
    pass


class IndyAttrValue(BaseModel):
    class Config:
        allow_population_by_field_name = True

    encoded: str = Field(
        ..., description="Attribute encoded value", example=-1, regex="^-?[0-9]*$"
    )
    raw: str = Field(..., description="Attribute raw value")


class IndyCredInfo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    attrs: Optional[Dict[str, str]] = Field(
        None, description="Attribute names and value"
    )
    cred_def_id: Optional[str] = Field(
        None,
        description="Credential definition identifier",
        example="WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
        regex="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    cred_rev_id: Optional[str] = Field(
        None,
        description="Credential revocation identifier",
        example="12345",
        regex="^[1-9][0-9]*$",
    )
    referent: Optional[str] = Field(
        None,
        description="Wallet referent",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    rev_reg_id: Optional[str] = Field(
        None,
        description="Revocation registry identifier",
        example="WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
        regex="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)",
    )
    schema_id: Optional[str] = Field(
        None,
        description="Schema identifier",
        example="WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
        regex="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
    )


class IndyCredRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    blinded_ms: Dict[str, Any] = Field(..., description="Blinded master secret")
    blinded_ms_correctness_proof: Dict[str, Any] = Field(
        ..., description="Blinded master secret correctness proof"
    )
    cred_def_id: str = Field(
        ...,
        description="Credential definition identifier",
        example="WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
        regex="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    nonce: str = Field(
        ..., description="Nonce in credential request", example="0", regex="^[0-9]*$"
    )
    prover_did: str = Field(
        ...,
        description="Prover DID",
        example="WgWxqztrNooG92RXvxSTWv",
        regex="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )


class IndyCredential(BaseModel):
    class Config:
        allow_population_by_field_name = True

    cred_def_id: str = Field(
        ...,
        description="Credential definition identifier",
        example="WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
        regex="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    rev_reg: Optional[Dict[str, Any]] = Field(
        None, description="Revocation registry state"
    )
    rev_reg_id: Optional[str] = Field(
        None,
        description="Revocation registry identifier",
        example="WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
        regex="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)",
    )
    schema_id: str = Field(
        ...,
        description="Schema identifier",
        example="WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
        regex="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
    )
    signature: Dict[str, Any] = Field(..., description="Credential signature")
    signature_correctness_proof: Dict[str, Any] = Field(
        ..., description="Credential signature correctness proof"
    )
    values: Dict[str, IndyAttrValue] = Field(..., description="Credential attributes")
    witness: Optional[Dict[str, Any]] = Field(
        None, description="Witness for revocation proof"
    )


class IndyEQProof(BaseModel):
    class Config:
        allow_population_by_field_name = True

    a_prime: Optional[str] = Field(None, example="0", regex="^[0-9]*$")
    e: Optional[str] = Field(None, example="0", regex="^[0-9]*$")
    m: Optional[Dict[str, str]] = None
    m2: Optional[str] = Field(None, example="0", regex="^[0-9]*$")
    revealed_attrs: Optional[Dict[str, str]] = None
    v: Optional[str] = Field(None, example="0", regex="^[0-9]*$")


class IndyGEProofPred(BaseModel):
    class Config:
        allow_population_by_field_name = True

    attr_name: Optional[str] = Field(
        None, description="Attribute name, indy-canonicalized"
    )
    p_type: Optional[Literal["LT", "LE", "GE", "GT"]] = Field(
        None, description="Predicate type"
    )
    value: Optional[int] = Field(None, description="Predicate threshold value")


class IndyKeyCorrectnessProof(BaseModel):
    class Config:
        allow_population_by_field_name = True

    c: str = Field(
        ..., description="c in key correctness proof", example="0", regex="^[0-9]*$"
    )
    xr_cap: List[List[str]] = Field(..., description="xr_cap in key correctness proof")
    xz_cap: str = Field(
        ...,
        description="xz_cap in key correctness proof",
        example="0",
        regex="^[0-9]*$",
    )


class IndyNonRevocProof(BaseModel):
    class Config:
        allow_population_by_field_name = True

    c_list: Optional[Dict[str, str]] = None
    x_list: Optional[Dict[str, str]] = None


class IndyNonRevocationInterval(BaseModel):
    class Config:
        allow_population_by_field_name = True

    from_: Optional[int] = Field(
        None,
        alias="from",
        description="Earliest time of interest in non-revocation interval",
        example=1640995199,
        ge=0,
        le=18446744073709551615,
    )
    to: Optional[int] = Field(
        None,
        description="Latest time of interest in non-revocation interval",
        example=1640995199,
        ge=0,
        le=18446744073709551615,
    )


class IndyPresAttrSpec(BaseModel):
    class Config:
        allow_population_by_field_name = True

    cred_def_id: Optional[str] = Field(
        None,
        example="WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
        regex="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    mime_type: Optional[str] = Field(
        None,
        alias="mime-type",
        description="MIME type (default null)",
        example="image/jpeg",
    )
    name: str = Field(..., description="Attribute name", example="favourite_drink")
    referent: Optional[str] = Field(
        None, description="Credential referent", example="0"
    )
    value: Optional[str] = Field(None, description="Attribute value", example="martini")


class IndyPresPredSpec(BaseModel):
    class Config:
        allow_population_by_field_name = True

    cred_def_id: Optional[str] = Field(
        None,
        description="Credential definition identifier",
        example="WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
        regex="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    name: str = Field(..., description="Attribute name", example="high_score")
    predicate: Literal["<", "<=", ">=", ">"] = Field(
        ..., description="Predicate type ('<', '<=', '>=', or '>')", example=">="
    )
    threshold: int = Field(..., description="Threshold value")


class IndyPresPreview(BaseModel):
    class Config:
        allow_population_by_field_name = True

    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type identifier",
        example="did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/present-proof/1.0/presentation-preview",
    )
    attributes: List[IndyPresAttrSpec]
    predicates: List[IndyPresPredSpec]


class IndyProofIdentifier(BaseModel):
    class Config:
        allow_population_by_field_name = True

    cred_def_id: Optional[str] = Field(
        None,
        description="Credential definition identifier",
        example="WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
        regex="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    rev_reg_id: Optional[str] = Field(
        None,
        description="Revocation registry identifier",
        example="WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
        regex="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)",
    )
    schema_id: Optional[str] = Field(
        None,
        description="Schema identifier",
        example="WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
        regex="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
    )
    timestamp: Optional[int] = Field(
        None,
        description="Timestamp epoch",
        example=1640995199,
        ge=0,
        le=18446744073709551615,
    )


class IndyProofProofAggregatedProof(BaseModel):
    class Config:
        allow_population_by_field_name = True

    c_hash: Optional[str] = Field(None, description="c_hash value")
    c_list: Optional[List[List[int]]] = Field(None, description="c_list value")


class IndyProofReqAttrSpecNonRevoked(IndyNonRevocationInterval):
    pass


class IndyProofReqPredSpecNonRevoked(IndyNonRevocationInterval):
    pass


class IndyProofRequestNonRevoked(IndyNonRevocationInterval):
    pass


class IndyProofRequestedProofPredicate(BaseModel):
    class Config:
        allow_population_by_field_name = True

    sub_proof_index: Optional[int] = Field(None, description="Sub-proof index")


class IndyProofRequestedProofRevealedAttr(BaseModel):
    class Config:
        allow_population_by_field_name = True

    encoded: Optional[str] = Field(
        None, description="Encoded value", example=-1, regex="^-?[0-9]*$"
    )
    raw: Optional[str] = Field(None, description="Raw value")
    sub_proof_index: Optional[int] = Field(None, description="Sub-proof index")


class IndyRequestedCredsRequestedAttr(BaseModel):
    class Config:
        allow_population_by_field_name = True

    cred_id: str = Field(
        ...,
        description="Wallet credential identifier (typically but not necessarily a UUID)",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    revealed: Optional[bool] = Field(
        None, description="Whether to reveal attribute in proof (default true)"
    )


class IndyRequestedCredsRequestedPred(BaseModel):
    class Config:
        allow_population_by_field_name = True

    cred_id: str = Field(
        ...,
        description="Wallet credential identifier (typically but not necessarily a UUID)",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    timestamp: Optional[int] = Field(
        None,
        description="Epoch timestamp of interest for non-revocation proof",
        example=1640995199,
        ge=0,
        le=18446744073709551615,
    )


class IndyRevRegDefValuePublicKeysAccumKey(BaseModel):
    class Config:
        allow_population_by_field_name = True

    z: Optional[str] = Field(
        None, description="Value for z", example="1 120F522F81E6B7 1 09F7A59005C4939854"
    )


class IndyRevRegEntryValue(BaseModel):
    class Config:
        allow_population_by_field_name = True

    accum: Optional[str] = Field(
        None,
        description="Accumulator value",
        example="21 11792B036AED0AAA12A4 4 298B2571FFC63A737",
    )
    prev_accum: Optional[str] = Field(
        None,
        alias="prevAccum",
        description="Previous accumulator value",
        example="21 137AC810975E4 6 76F0384B6F23",
    )
    revoked: Optional[List[int]] = Field(
        None, description="Revoked credential revocation identifiers"
    )


class IntroModuleResponse(ActionMenuModulesResult):
    pass


class InvitationCreateRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    accept: Optional[List[str]] = Field(
        None,
        description="List of mime type in order of preference that should be use in responding to the message",
        example=["didcomm/aip1", "didcomm/aip2;env=rfc19"],
    )
    alias: Optional[str] = Field(
        None, description="Alias for connection", example="Barry"
    )
    attachments: Optional[List[AttachmentDef]] = Field(
        None, description="Optional invitation attachments"
    )
    handshake_protocols: Optional[List[str]] = None
    mediation_id: Optional[str] = Field(
        None,
        description="Identifier for active mediation record to be used",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
        regex="[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description="Optional metadata to attach to the connection created with the invitation",
    )
    my_label: Optional[str] = Field(
        None,
        description="Label for connection invitation",
        example="Invitation to Barry",
    )
    protocol_version: Optional[str] = Field(
        None, description="OOB protocol version", example="1.1"
    )
    use_public_did: Optional[bool] = Field(
        None, description="Whether to use public DID in invitation", example=False
    )


class InvitationResult(BaseModel):
    class Config:
        allow_population_by_field_name = True

    connection_id: str = Field(
        ...,
        description="Connection identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    invitation: ConnectionInvitation
    invitation_url: str = Field(
        ...,
        description="Invitation URL",
        example="http://192.168.56.101:8020/invite?c_i=eyJAdHlwZSI6Li4ufQ==",
    )


class IssueCredentialModuleResponse(ActionMenuModulesResult):
    pass


class IssuerCredRevRecord(BaseModel):
    class Config:
        allow_population_by_field_name = True

    created_at: Optional[str] = Field(
        None,
        description="Time of record creation",
        example="2021-12-31 23:59:59+00:00",
        regex="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    cred_def_id: Optional[str] = Field(
        None,
        description="Credential definition identifier",
        example="WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
        regex="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    cred_ex_id: Optional[str] = Field(
        None,
        description="Credential exchange record identifier at credential issue",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    cred_ex_version: Optional[str] = Field(
        None, description="Credential exchange version"
    )
    cred_rev_id: Optional[str] = Field(
        None,
        description="Credential revocation identifier",
        example="12345",
        regex="^[1-9][0-9]*$",
    )
    record_id: Optional[str] = Field(
        None,
        description="Issuer credential revocation record identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    rev_reg_id: Optional[str] = Field(
        None,
        description="Revocation registry identifier",
        example="WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
        regex="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)",
    )
    state: Optional[str] = Field(
        None, description="Issue credential revocation record state", example="issued"
    )
    updated_at: Optional[str] = Field(
        None,
        description="Time of last record update",
        example="2021-12-31 23:59:59+00:00",
        regex="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )


class KeylistQueryFilterRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    filter: Optional[Dict[str, Any]] = Field(
        None, description="Filter for keylist query"
    )


class KeylistQueryPaginate(BaseModel):
    class Config:
        allow_population_by_field_name = True

    limit: Optional[int] = Field(
        None, description="Limit for keylist query", example=30
    )
    offset: Optional[int] = Field(None, description="Offset value for query", example=0)


class KeylistUpdateRule(BaseModel):
    class Config:
        allow_population_by_field_name = True

    action: Literal["add", "remove"] = Field(
        ..., description="Action for specific key", example="add"
    )
    recipient_key: str = Field(
        ...,
        description="Key to remove or add",
        example="did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH",
        regex="^did:key:z[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]+$|^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$",
    )


class LDProofVCDetailOptions(BaseModel):
    class Config:
        allow_population_by_field_name = True

    challenge: Optional[str] = Field(
        None,
        description="A challenge to include in the proof. SHOULD be provided by the requesting party of the credential (=holder)",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    created: Optional[str] = Field(
        None,
        description="The date and time of the proof (with a maximum accuracy in seconds). Defaults to current system time",
        example="2021-12-31 23:59:59+00:00",
        regex="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    credential_status: Optional[CredentialStatusOptions] = Field(
        None,
        alias="credentialStatus",
        description="The credential status mechanism to use for the credential. Omitting the property indicates the issued credential will not include a credential status",
    )
    domain: Optional[str] = Field(
        None,
        description="The intended domain of validity for the proof",
        example="example.com",
    )
    proof_purpose: Optional[str] = Field(
        None,
        alias="proofPurpose",
        description="The proof purpose used for the proof. Should match proof purposes registered in the Linked Data Proofs Specification",
        example="assertionMethod",
    )
    proof_type: str = Field(
        ...,
        alias="proofType",
        description="The proof type used for the proof. Should match suites registered in the Linked Data Cryptographic Suite Registry",
        example="Ed25519Signature2018",
    )


class LedgerConfigInstance(BaseModel):
    class Config:
        allow_population_by_field_name = True

    genesis_file: Optional[str] = Field(None, description="genesis_file")
    genesis_transactions: Optional[str] = Field(
        None, description="genesis_transactions"
    )
    genesis_url: Optional[str] = Field(None, description="genesis_url")
    id: Optional[str] = Field(None, description="ledger_id")
    is_production: Optional[bool] = Field(None, description="is_production")


class LedgerConfigList(BaseModel):
    class Config:
        allow_population_by_field_name = True

    ledger_config_list: List[LedgerConfigInstance]


class LedgerModulesResult(ActionMenuModulesResult):
    pass


class LinkedDataProof(BaseModel):
    class Config:
        allow_population_by_field_name = True

    challenge: Optional[str] = Field(
        None,
        description="Associates a challenge with a proof, for use with a proofPurpose such as authentication",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    created: str = Field(
        ...,
        description="The string value of an ISO8601 combined date and time string generated by the Signature Algorithm",
        example="2021-12-31 23:59:59+00:00",
        regex="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    domain: Optional[str] = Field(
        None,
        description="A string value specifying the restricted domain of the signature.",
        example="example.com",
        regex="\\w+:(\\/?\\/?)[^\\s]+",
    )
    jws: Optional[str] = Field(
        None,
        description="Associates a Detached Json Web Signature with a proof",
        example="eyJhbGciOiAiRWREUc2UsICJjcml0IjogWyJiNjQiXX0..lKJU0Df_keblRKhZAS9Qq6zybm-HqUXNVZ8vgEPNTAjQ1Ch6YBKY7UBAjg6iBX5qBQ",
    )
    nonce: Optional[str] = Field(
        None,
        description="The nonce",
        example="CF69iO3nfvqRsRBNElE8b4wO39SyJHPM7Gg1nExltW5vSfQA1lvDCR/zXX1To0/4NLo==",
    )
    proof_purpose: str = Field(
        ...,
        alias="proofPurpose",
        description="Proof purpose",
        example="assertionMethod",
    )
    proof_value: Optional[str] = Field(
        None,
        alias="proofValue",
        description="The proof value of a proof",
        example="sy1AahqbzJQ63n9RtekmwzqZeVj494VppdAVJBnMYrTwft6cLJJGeTSSxCCJ6HKnRtwE7jjDh6sB2z2AAiZY9BBnCD8wUVgwqH3qchGRCuC2RugA4eQ9fUrR4Yuycac3caiaaay",
    )
    type: str = Field(
        ...,
        description="Identifies the digital signature suite that was used to create the signature",
        example="Ed25519Signature2018",
    )
    verification_method: str = Field(
        ...,
        alias="verificationMethod",
        description="Information used for proof verification",
        example="did:key:z6Mkgg342Ycpuk263R9d8Aq6MUaxPn1DDeHyGo38EefXmgDL#z6Mkgg342Ycpuk263R9d8Aq6MUaxPn1DDeHyGo38EefXmgDL",
        regex="\\w+:(\\/?\\/?)[^\\s]+",
    )


class MediationCreateRequest(AdminMediationDeny):
    pass


class MediationDeny(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        example="https://didcomm.org/my-family/1.0/my-message-type",
    )
    mediator_terms: Optional[List[str]] = None
    recipient_terms: Optional[List[str]] = None


class MediationGrant(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        example="https://didcomm.org/my-family/1.0/my-message-type",
    )
    endpoint: Optional[str] = Field(
        None,
        description="endpoint on which messages destined for the recipient are received.",
        example="http://192.168.56.102:8020/",
    )
    routing_keys: Optional[List[str]] = None


class MediationIdMatchInfo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    mediation_id: str = Field(
        ...,
        description="Mediation record identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )


class RoutingKey2(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: str = Field(
        ...,
        example="did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH",
    )


class MediationRecord(BaseModel):
    class Config:
        allow_population_by_field_name = True

    connection_id: str
    created_at: Optional[str] = Field(
        None,
        description="Time of record creation",
        example="2021-12-31 23:59:59+00:00",
        regex="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    endpoint: Optional[str] = None
    mediation_id: Optional[str] = None
    mediator_terms: Optional[List[str]] = None
    recipient_terms: Optional[List[str]] = None
    role: str
    routing_keys: Optional[List[RoutingKey2]] = None
    state: Optional[str] = Field(
        None, description="Current record state", example="active"
    )
    updated_at: Optional[str] = Field(
        None,
        description="Time of last record update",
        example="2021-12-31 23:59:59+00:00",
        regex="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )


class MenuFormParam(BaseModel):
    class Config:
        allow_population_by_field_name = True

    default: Optional[str] = Field(
        None, description="Default parameter value", example="0"
    )
    description: Optional[str] = Field(
        None,
        description="Additional descriptive text for menu form parameter",
        example="Delay in seconds before starting",
    )
    name: str = Field(..., description="Menu parameter name", example="delay")
    required: Optional[bool] = Field(
        None, description="Whether parameter is required", example=False
    )
    title: str = Field(
        ..., description="Menu parameter title", example="Delay in seconds"
    )
    type: Optional[str] = Field(
        None, description="Menu form parameter input type", example="int"
    )


class MultitenantModuleResponse(ActionMenuModulesResult):
    pass


class PerformRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    name: Optional[str] = Field(None, description="Menu option name", example="Query")
    params: Optional[Dict[str, str]] = Field(None, description="Input parameter values")


class PingRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    comment: Optional[str] = Field(None, description="Comment for the ping message")


class PingRequestResponse(BaseModel):
    class Config:
        allow_population_by_field_name = True

    thread_id: Optional[str] = Field(None, description="Thread ID of the ping message")


class PresentationProposal(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        example="https://didcomm.org/my-family/1.0/my-message-type",
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    presentation_proposal: IndyPresPreview


class ProfileSettings(BaseModel):
    class Config:
        allow_population_by_field_name = True

    settings: Optional[Dict[str, Any]] = Field(
        None,
        description="Profile settings dict",
        example={
            "debug.invite_public": True,
            "log.level": "INFO",
            "public_invites": False,
        },
    )


class ProtocolDescriptor(BaseModel):
    class Config:
        allow_population_by_field_name = True

    pid: str
    roles: Optional[List[str]] = Field(None, description="List of roles")


class Rrid2cridItem(PurgeItem):
    pass


class PublishRevocations(BaseModel):
    class Config:
        allow_population_by_field_name = True

    rrid2crid: Optional[Dict[str, List[Rrid2cridItem]]] = Field(
        None, description="Credential revocation ids by revocation registry id"
    )


class Query(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        example="https://didcomm.org/my-family/1.0/my-message-type",
    )
    comment: Optional[str] = None
    query: str


class QueryItem(BaseModel):
    class Config:
        allow_population_by_field_name = True

    feature_type: Literal["protocol", "goal-code"] = Field(
        ..., alias="feature-type", description="feature type"
    )
    match: str = Field(..., description="match")


class RawEncoded(BaseModel):
    class Config:
        allow_population_by_field_name = True

    encoded: Optional[str] = Field(
        None, description="Encoded value", example=-1, regex="^-?[0-9]*$"
    )
    raw: Optional[str] = Field(None, description="Raw value")


class RoutingKey3(RoutingKey):
    pass


class ReceiveInvitationRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        example="https://didcomm.org/my-family/1.0/my-message-type",
    )
    did: Optional[str] = Field(
        None,
        description="DID for connection invitation",
        example="WgWxqztrNooG92RXvxSTWv",
        regex="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )
    image_url: Optional[str] = Field(
        None,
        alias="imageUrl",
        description="Optional image URL for connection invitation",
        example="http://192.168.56.101/img/logo.jpg",
    )
    label: Optional[str] = Field(
        None, description="Optional label for connection invitation", example="Bob"
    )
    recipient_keys: Optional[List[RecipientKey]] = Field(
        None, alias="recipientKeys", description="List of recipient keys"
    )
    routing_keys: Optional[List[RoutingKey3]] = Field(
        None, alias="routingKeys", description="List of routing keys"
    )
    service_endpoint: Optional[str] = Field(
        None,
        alias="serviceEndpoint",
        description="Service endpoint at which to reach this agent",
        example="http://192.168.56.101:8020",
    )


class RemoveWalletRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    wallet_key: Optional[str] = Field(
        None,
        description="Master key used for key derivation. Only required for             unmanaged wallets.",
        example="MySecretKey123",
    )


class ResolutionResult(BaseModel):
    class Config:
        allow_population_by_field_name = True

    did_document: Dict[str, Any] = Field(..., description="DID Document")
    metadata: Dict[str, Any] = Field(..., description="Resolution metadata")


class RevRegCreateRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    credential_definition_id: Optional[str] = Field(
        None,
        description="Credential definition identifier",
        example="WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
        regex="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    max_cred_num: Optional[int] = Field(
        None, description="Revocation registry size", example=1000, ge=4, le=32768
    )


class RevRegIssuedResult(BaseModel):
    class Config:
        allow_population_by_field_name = True

    result: Optional[int] = Field(
        None,
        description="Number of credentials issued against revocation registry",
        example=0,
        ge=0,
    )


class RevRegUpdateTailsFileUri(BaseModel):
    class Config:
        allow_population_by_field_name = True

    tails_public_uri: str = Field(
        ...,
        description="Public URI to the tails file",
        example="http://192.168.56.133:6543/revocation/registry/WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0/tails-file",
    )


class RevRegWalletUpdatedResult(BaseModel):
    class Config:
        allow_population_by_field_name = True

    accum_calculated: Optional[Dict[str, Any]] = Field(
        None, description="Calculated accumulator for phantom revocations"
    )
    accum_fixed: Optional[Dict[str, Any]] = Field(
        None, description="Applied ledger transaction to fix revocations"
    )
    rev_reg_delta: Optional[Dict[str, Any]] = Field(
        None, description="Indy revocation registry delta"
    )


class RevRegId(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: str = Field(
        ...,
        description="Revocation registry identifiers",
        example="WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
        regex="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)",
    )


class RevRegsCreated(BaseModel):
    class Config:
        allow_population_by_field_name = True

    rev_reg_ids: Optional[List[RevRegId]] = None


class RevocationModuleResponse(ActionMenuModulesResult):
    pass


class RevokeRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    comment: Optional[str] = Field(
        None, description="Optional comment to include in revocation notification"
    )
    connection_id: Optional[str] = Field(
        None,
        description="Connection ID to which the revocation notification will be sent; required if notify is true",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
        regex="[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
    )
    cred_ex_id: Optional[str] = Field(
        None,
        description="Credential exchange identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
        regex="[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
    )
    cred_rev_id: Optional[str] = Field(
        None,
        description="Credential revocation identifier",
        example="12345",
        regex="^[1-9][0-9]*$",
    )
    notify: Optional[bool] = Field(
        None, description="Send a notification to the credential recipient"
    )
    notify_version: Optional[Literal["v1_0", "v2_0"]] = Field(
        None,
        description="Specify which version of the revocation notification should be sent",
    )
    publish: Optional[bool] = Field(
        None,
        description="(True) publish revocation to ledger immediately, or (default, False) mark it pending",
    )
    rev_reg_id: Optional[str] = Field(
        None,
        description="Revocation registry identifier",
        example="WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
        regex="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)",
    )
    thread_id: Optional[str] = Field(
        None,
        description="Thread ID of the credential exchange message thread resulting in the credential now being revoked; required if notify is true",
    )


class RouteRecord(BaseModel):
    class Config:
        allow_population_by_field_name = True

    connection_id: Optional[str] = None
    created_at: Optional[str] = Field(
        None,
        description="Time of record creation",
        example="2021-12-31 23:59:59+00:00",
        regex="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    recipient_key: str
    record_id: Optional[str] = None
    role: Optional[str] = None
    state: Optional[str] = Field(
        None, description="Current record state", example="active"
    )
    updated_at: Optional[str] = Field(
        None,
        description="Time of last record update",
        example="2021-12-31 23:59:59+00:00",
        regex="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    wallet_id: Optional[str] = None


class Schema(BaseModel):
    class Config:
        allow_population_by_field_name = True

    attr_names: Optional[List[str]] = Field(
        None, alias="attrNames", description="Schema attribute names"
    )
    id: Optional[str] = Field(
        None,
        description="Schema identifier",
        example="WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
        regex="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
    )
    name: Optional[str] = Field(None, description="Schema name", example="schema_name")
    seq_no: Optional[int] = Field(
        None, alias="seqNo", description="Schema sequence number", example=10, ge=1
    )
    ver: Optional[str] = Field(
        None, description="Node protocol version", example="1.0", regex="^[0-9.]+$"
    )
    version: Optional[str] = Field(
        None, description="Schema version", example="1.0", regex="^[0-9.]+$"
    )


class SchemaGetResult(BaseModel):
    class Config:
        allow_population_by_field_name = True

    schema_: Optional[Schema] = Field(None, alias="schema")


class SchemaInputDescriptor(BaseModel):
    class Config:
        allow_population_by_field_name = True

    required: Optional[bool] = Field(None, description="Required")
    uri: Optional[str] = Field(None, description="URI")


class SchemaSendRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    attributes: List[str] = Field(..., description="List of schema attributes")
    schema_name: str = Field(..., description="Schema name", example="prefs")
    schema_version: str = Field(
        ..., description="Schema version", example="1.0", regex="^[0-9.]+$"
    )


class SchemaSendResult(BaseModel):
    class Config:
        allow_population_by_field_name = True

    schema_: Schema = Field(..., alias="schema", description="Schema definition")
    schema_id: str = Field(
        ...,
        description="Schema identifier",
        example="WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
        regex="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
    )


class SchemaId(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: str = Field(
        ...,
        description="Schema identifiers",
        example="WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
        regex="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
    )


class SchemasCreatedResult(BaseModel):
    class Config:
        allow_population_by_field_name = True

    schema_ids: Optional[List[SchemaId]] = None


class SchemasInputDescriptorFilter(BaseModel):
    class Config:
        allow_population_by_field_name = True

    oneof_filter: Optional[bool] = Field(None, description="oneOf")
    uri_groups: Optional[List[List[SchemaInputDescriptor]]] = None


class SendMessage(BaseModel):
    class Config:
        allow_population_by_field_name = True

    content: Optional[str] = Field(None, description="Message content", example="Hello")


class ServiceDecorator(BaseModel):
    class Config:
        allow_population_by_field_name = True

    recipient_keys: List[RecipientKey] = Field(
        ..., alias="recipientKeys", description="List of recipient keys"
    )
    routing_keys: Optional[List[RoutingKey3]] = Field(
        None, alias="routingKeys", description="List of routing keys"
    )
    service_endpoint: str = Field(
        ...,
        alias="serviceEndpoint",
        description="Service endpoint at which to reach this agent",
        example="http://192.168.56.101:8020",
    )


class SignResponse(BaseModel):
    class Config:
        allow_population_by_field_name = True

    error: Optional[str] = Field(None, description="Error text")
    signed_doc: Optional[Dict[str, Any]] = Field(None, description="Signed document")


class SignatureOptions(BaseModel):
    class Config:
        allow_population_by_field_name = True

    challenge: Optional[str] = None
    domain: Optional[str] = None
    proof_purpose: str = Field(..., alias="proofPurpose")
    type: Optional[str] = None
    verification_method: str = Field(..., alias="verificationMethod")


class SignedDoc(BaseModel):
    class Config:
        allow_population_by_field_name = True

    proof: SignatureOptions = Field(..., description="Linked data proof")


class SubmissionRequirements(BaseModel):
    class Config:
        allow_population_by_field_name = True

    count: Optional[int] = Field(None, description="Count Value", example=1234)
    from_: Optional[str] = Field(None, alias="from", description="From")
    from_nested: Optional[List[Dict[str, Any]]] = None
    max: Optional[int] = Field(None, description="Max Value", example=1234)
    min: Optional[int] = Field(None, description="Min Value", example=1234)
    name: Optional[str] = Field(None, description="Name")
    purpose: Optional[str] = Field(None, description="Purpose")
    rule: Optional[Literal["all", "pick"]] = Field(None, description="Selection")


class TAAAccept(BaseModel):
    class Config:
        allow_population_by_field_name = True

    mechanism: Optional[str] = None
    text: Optional[str] = None
    version: Optional[str] = None


class TAAAcceptance(BaseModel):
    class Config:
        allow_population_by_field_name = True

    mechanism: Optional[str] = None
    time: Optional[int] = Field(None, example=1640995199, ge=0, le=18446744073709551615)


class TAARecord(BaseModel):
    class Config:
        allow_population_by_field_name = True

    digest: Optional[str] = None
    text: Optional[str] = None
    version: Optional[str] = None


class TailsDeleteResponse(BaseModel):
    class Config:
        allow_population_by_field_name = True

    message: Optional[str] = None


class TransactionJobs(BaseModel):
    class Config:
        allow_population_by_field_name = True

    transaction_my_job: Optional[
        Literal["TRANSACTION_AUTHOR", "TRANSACTION_ENDORSER", "reset"]
    ] = Field(None, description="My transaction related job")
    transaction_their_job: Optional[
        Literal["TRANSACTION_AUTHOR", "TRANSACTION_ENDORSER", "reset"]
    ] = Field(None, description="Their transaction related job")


class TransactionRecord(BaseModel):
    class Config:
        allow_population_by_field_name = True

    type: Optional[str] = Field(
        None, alias="_type", description="Transaction type", example="101"
    )
    connection_id: Optional[str] = Field(
        None,
        description="The connection identifier for thie particular transaction record",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    created_at: Optional[str] = Field(
        None,
        description="Time of record creation",
        example="2021-12-31 23:59:59+00:00",
        regex="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    endorser_write_txn: Optional[bool] = Field(
        None,
        description="If True, Endorser will write the transaction after endorsing it",
        example=True,
    )
    formats: Optional[List[Dict[str, str]]] = None
    messages_attach: Optional[List[Dict[str, Any]]] = None
    meta_data: Optional[Dict[str, Any]] = Field(
        None,
        example={
            "context": {"param1": "param1_value", "param2": "param2_value"},
            "post_process": [{"topic": "topic_value", "other": "other_value"}],
        },
    )
    signature_request: Optional[List[Dict[str, Any]]] = None
    signature_response: Optional[List[Dict[str, Any]]] = None
    state: Optional[str] = Field(
        None, description="Current record state", example="active"
    )
    thread_id: Optional[str] = Field(
        None,
        description="Thread Identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    timing: Optional[Dict[str, Any]] = Field(
        None, example={"expires_time": "2020-12-13T17:29:06+0000"}
    )
    trace: Optional[bool] = Field(
        None, description="Record trace information, based on agent configuration"
    )
    transaction_id: Optional[str] = Field(
        None,
        description="Transaction identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    updated_at: Optional[str] = Field(
        None,
        description="Time of last record update",
        example="2021-12-31 23:59:59+00:00",
        regex="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )


class TxnOrCredentialDefinitionSendResult(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    sent: Optional[CredentialDefinitionSendResult] = None
    txn: Optional[TransactionRecord] = Field(
        None, description="Credential definition transaction to endorse"
    )


class TxnOrPublishRevocationsResult(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    sent: Optional[PublishRevocations] = None
    txn: Optional[TransactionRecord] = Field(
        None, description="Revocation registry revocations transaction to endorse"
    )


class TxnOrRegisterLedgerNymResponse(BaseModel):
    class Config:
        allow_population_by_field_name = True

    success: Optional[bool] = Field(
        None, description="Success of nym registration operation", example=True
    )
    txn: Optional[TransactionRecord] = Field(
        None, description="DID transaction to endorse"
    )


class TxnOrSchemaSendResult(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    sent: Optional[SchemaSendResult] = Field(None, description="Content sent")
    txn: Optional[TransactionRecord] = Field(
        None, description="Schema transaction to endorse"
    )


class UpdateProfileSettings(BaseModel):
    class Config:
        allow_population_by_field_name = True

    extra_settings: Optional[Dict[str, Any]] = Field(
        None,
        description="Agent config key-value pairs",
        example={
            "ACAPY_INVITE_PUBLIC": True,
            "log-level": "INFO",
            "public-invites": False,
        },
    )


class UpdateWalletRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    extra_settings: Optional[Dict[str, Any]] = Field(
        None, description="Agent config key-value pairs"
    )
    image_url: Optional[str] = Field(
        None,
        description="Image url for this wallet. This image url is publicized            (self-attested) to other agents as part of forming a connection.",
        example="https://aries.ca/images/sample.png",
    )
    label: Optional[str] = Field(
        None,
        description="Label for this wallet. This label is publicized            (self-attested) to other agents as part of forming a connection.",
        example="Alice",
    )
    wallet_dispatch_type: Optional[Literal["default", "both", "base"]] = Field(
        None,
        description="Webhook target dispatch type for this wallet.             default - Dispatch only to webhooks associated with this wallet.             base - Dispatch only to webhooks associated with the base wallet.             both - Dispatch to both webhook targets.",
        example="default",
    )
    wallet_webhook_urls: Optional[List[str]] = Field(
        None, description="List of Webhook URLs associated with this subwallet"
    )


class V10CredentialBoundOfferRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    counter_proposal: Optional[CredentialProposal] = Field(
        None, description="Optional counter-proposal"
    )


class V10CredentialConnFreeOfferRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    auto_issue: Optional[bool] = Field(
        None,
        description="Whether to respond automatically to credential requests, creating and issuing requested credentials",
    )
    auto_remove: Optional[bool] = Field(
        None,
        description="Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    cred_def_id: str = Field(
        ...,
        description="Credential definition identifier",
        example="WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
        regex="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    credential_preview: CredentialPreview
    trace: Optional[bool] = Field(
        None, description="Record trace information, based on agent configuration"
    )


class V10CredentialCreate(BaseModel):
    class Config:
        allow_population_by_field_name = True

    auto_remove: Optional[bool] = Field(
        None,
        description="Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    cred_def_id: Optional[str] = Field(
        None,
        description="Credential definition identifier",
        example="WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
        regex="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    credential_proposal: CredentialPreview
    issuer_did: Optional[str] = Field(
        None,
        description="Credential issuer DID",
        example="WgWxqztrNooG92RXvxSTWv",
        regex="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )
    schema_id: Optional[str] = Field(
        None,
        description="Schema identifier",
        example="WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
        regex="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
    )
    schema_issuer_did: Optional[str] = Field(
        None,
        description="Schema issuer DID",
        example="WgWxqztrNooG92RXvxSTWv",
        regex="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )
    schema_name: Optional[str] = Field(
        None, description="Schema name", example="preferences"
    )
    schema_version: Optional[str] = Field(
        None, description="Schema version", example="1.0", regex="^[0-9.]+$"
    )
    trace: Optional[bool] = Field(
        None, description="Record trace information, based on agent configuration"
    )


class V10CredentialFreeOfferRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    auto_issue: Optional[bool] = Field(
        None,
        description="Whether to respond automatically to credential requests, creating and issuing requested credentials",
    )
    auto_remove: Optional[bool] = Field(
        None,
        description="Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    connection_id: str = Field(
        ...,
        description="Connection identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    cred_def_id: str = Field(
        ...,
        description="Credential definition identifier",
        example="WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
        regex="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    credential_preview: CredentialPreview
    trace: Optional[bool] = Field(
        None, description="Record trace information, based on agent configuration"
    )


class V10CredentialIssueRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    comment: Optional[str] = Field(None, description="Human-readable comment")


class V10CredentialProblemReportRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    description: str


class V10CredentialProposalRequestMand(BaseModel):
    class Config:
        allow_population_by_field_name = True

    auto_remove: Optional[bool] = Field(
        None,
        description="Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    connection_id: str = Field(
        ...,
        description="Connection identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    cred_def_id: Optional[str] = Field(
        None,
        description="Credential definition identifier",
        example="WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
        regex="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    credential_proposal: CredentialPreview
    issuer_did: Optional[str] = Field(
        None,
        description="Credential issuer DID",
        example="WgWxqztrNooG92RXvxSTWv",
        regex="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )
    schema_id: Optional[str] = Field(
        None,
        description="Schema identifier",
        example="WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
        regex="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
    )
    schema_issuer_did: Optional[str] = Field(
        None,
        description="Schema issuer DID",
        example="WgWxqztrNooG92RXvxSTWv",
        regex="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )
    schema_name: Optional[str] = Field(
        None, description="Schema name", example="preferences"
    )
    schema_version: Optional[str] = Field(
        None, description="Schema version", example="1.0", regex="^[0-9.]+$"
    )
    trace: Optional[bool] = Field(
        None, description="Record trace information, based on agent configuration"
    )


class V10CredentialProposalRequestOpt(BaseModel):
    class Config:
        allow_population_by_field_name = True

    auto_remove: Optional[bool] = Field(
        None,
        description="Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    connection_id: str = Field(
        ...,
        description="Connection identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    cred_def_id: Optional[str] = Field(
        None,
        description="Credential definition identifier",
        example="WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
        regex="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    credential_proposal: Optional[CredentialPreview] = None
    issuer_did: Optional[str] = Field(
        None,
        description="Credential issuer DID",
        example="WgWxqztrNooG92RXvxSTWv",
        regex="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )
    schema_id: Optional[str] = Field(
        None,
        description="Schema identifier",
        example="WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
        regex="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
    )
    schema_issuer_did: Optional[str] = Field(
        None,
        description="Schema issuer DID",
        example="WgWxqztrNooG92RXvxSTWv",
        regex="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )
    schema_name: Optional[str] = Field(
        None, description="Schema name", example="preferences"
    )
    schema_version: Optional[str] = Field(
        None, description="Schema version", example="1.0", regex="^[0-9.]+$"
    )
    trace: Optional[bool] = Field(
        None, description="Record trace information, based on agent configuration"
    )


class V10CredentialStoreRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    credential_id: Optional[str] = None


class V10PresentProofModuleResponse(ActionMenuModulesResult):
    pass


class V10PresentationProblemReportRequest(V10CredentialProblemReportRequest):
    pass


class V10PresentationProposalRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    auto_present: Optional[bool] = Field(
        None,
        description="Whether to respond automatically to presentation requests, building and presenting requested proof",
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    connection_id: str = Field(
        ...,
        description="Connection identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    presentation_proposal: IndyPresPreview
    trace: Optional[bool] = Field(
        None, description="Whether to trace event (default false)", example=False
    )


class V10PresentationSendRequestToProposal(BaseModel):
    class Config:
        allow_population_by_field_name = True

    auto_verify: Optional[bool] = Field(
        None,
        description="Verifier choice to auto-verify proof presentation",
        example=False,
    )
    trace: Optional[bool] = Field(
        None, description="Whether to trace event (default false)", example=False
    )


class V20CredAttrSpec(CredAttrSpec):
    pass


class V20CredExRecordByFormat(BaseModel):
    class Config:
        allow_population_by_field_name = True

    cred_issue: Optional[Dict[str, Any]] = None
    cred_offer: Optional[Dict[str, Any]] = None
    cred_proposal: Optional[Dict[str, Any]] = None
    cred_request: Optional[Dict[str, Any]] = None


class V20CredExRecordIndy(BaseModel):
    class Config:
        allow_population_by_field_name = True

    created_at: Optional[str] = Field(
        None,
        description="Time of record creation",
        example="2021-12-31 23:59:59+00:00",
        regex="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    cred_ex_id: Optional[str] = Field(
        None,
        description="Corresponding v2.0 credential exchange record identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    cred_ex_indy_id: Optional[str] = Field(
        None,
        description="Record identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    cred_id_stored: Optional[str] = Field(
        None,
        description="Credential identifier stored in wallet",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    cred_request_metadata: Optional[Dict[str, Any]] = Field(
        None, description="Credential request metadata for indy holder"
    )
    cred_rev_id: Optional[str] = Field(
        None,
        description="Credential revocation identifier within revocation registry",
        example="12345",
        regex="^[1-9][0-9]*$",
    )
    rev_reg_id: Optional[str] = Field(
        None,
        description="Revocation registry identifier",
        example="WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
        regex="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)",
    )
    state: Optional[str] = Field(
        None, description="Current record state", example="active"
    )
    updated_at: Optional[str] = Field(
        None,
        description="Time of last record update",
        example="2021-12-31 23:59:59+00:00",
        regex="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )


class V20CredExRecordLDProof(BaseModel):
    class Config:
        allow_population_by_field_name = True

    created_at: Optional[str] = Field(
        None,
        description="Time of record creation",
        example="2021-12-31 23:59:59+00:00",
        regex="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    cred_ex_id: Optional[str] = Field(
        None,
        description="Corresponding v2.0 credential exchange record identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    cred_ex_ld_proof_id: Optional[str] = Field(
        None,
        description="Record identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    cred_id_stored: Optional[str] = Field(
        None,
        description="Credential identifier stored in wallet",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    state: Optional[str] = Field(
        None, description="Current record state", example="active"
    )
    updated_at: Optional[str] = Field(
        None,
        description="Time of last record update",
        example="2021-12-31 23:59:59+00:00",
        regex="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )


class V20CredFilterIndy(BaseModel):
    class Config:
        allow_population_by_field_name = True

    cred_def_id: Optional[str] = Field(
        None,
        description="Credential definition identifier",
        example="WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
        regex="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    issuer_did: Optional[str] = Field(
        None,
        description="Credential issuer DID",
        example="WgWxqztrNooG92RXvxSTWv",
        regex="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )
    schema_id: Optional[str] = Field(
        None,
        description="Schema identifier",
        example="WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
        regex="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
    )
    schema_issuer_did: Optional[str] = Field(
        None,
        description="Schema issuer DID",
        example="WgWxqztrNooG92RXvxSTWv",
        regex="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )
    schema_name: Optional[str] = Field(
        None, description="Schema name", example="preferences"
    )
    schema_version: Optional[str] = Field(
        None, description="Schema version", example="1.0", regex="^[0-9.]+$"
    )


class V20CredFormat(BaseModel):
    class Config:
        allow_population_by_field_name = True

    attach_id: str = Field(
        ...,
        description="Attachment identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    format: str = Field(
        ...,
        description="Attachment format specifier",
        example="aries/ld-proof-vc-detail@v1.0",
    )


class V20CredIssueProblemReportRequest(V10CredentialProblemReportRequest):
    pass


class V20CredIssueRequest(V10CredentialIssueRequest):
    pass


class V20CredPreview(BaseModel):
    class Config:
        allow_population_by_field_name = True

    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type identifier",
        example="issue-credential/2.0/credential-preview",
    )
    attributes: List[V20CredAttrSpec]


class V20CredRequestRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    holder_did: Optional[str] = Field(
        None,
        description="Holder DID to substitute for the credentialSubject.id",
        example="did:key:ahsdkjahsdkjhaskjdhakjshdkajhsdkjahs",
    )


class V20CredStoreRequest(V10CredentialStoreRequest):
    pass


class V20IssueCredentialModuleResponse(ActionMenuModulesResult):
    pass


class V20PresExRecordByFormat(BaseModel):
    class Config:
        allow_population_by_field_name = True

    pres: Optional[Dict[str, Any]] = None
    pres_proposal: Optional[Dict[str, Any]] = None
    pres_request: Optional[Dict[str, Any]] = None


class V20PresFormat(BaseModel):
    class Config:
        allow_population_by_field_name = True

    attach_id: str = Field(
        ...,
        description="Attachment identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    format: str = Field(
        ...,
        description="Attachment format specifier",
        example="dif/presentation-exchange/submission@v1.0",
    )


class V20PresProblemReportRequest(V10CredentialProblemReportRequest):
    pass


class V20PresentProofModuleResponse(ActionMenuModulesResult):
    pass


class V20PresentationSendRequestToProposal(V10PresentationSendRequestToProposal):
    pass


class Context(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: str = Field(
        ...,
        description="Context",
        example="https://myhost:8021",
        regex="^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$",
    )


class VCRecord(BaseModel):
    class Config:
        allow_population_by_field_name = True

    contexts: Optional[List[Context]] = None
    cred_tags: Optional[Dict[str, str]] = None
    cred_value: Optional[Dict[str, Any]] = Field(
        None, description="(JSON-serializable) credential value"
    )
    expanded_types: Optional[List[str]] = None
    given_id: Optional[str] = Field(
        None,
        description="Credential identifier",
        example="http://example.edu/credentials/3732",
    )
    issuer_id: Optional[str] = Field(
        None, description="Issuer identifier", example="https://example.edu/issuers/14"
    )
    proof_types: Optional[List[str]] = None
    record_id: Optional[str] = Field(
        None,
        description="Record identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    schema_ids: Optional[List[str]] = None
    subject_ids: Optional[List[str]] = None


class VCRecordList(BaseModel):
    class Config:
        allow_population_by_field_name = True

    results: Optional[List[VCRecord]] = None


class VerifyRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    doc: SignedDoc = Field(..., description="Signed document")
    verkey: Optional[str] = Field(
        None, description="Verkey to use for doc verification"
    )


class VerifyResponse(BaseModel):
    class Config:
        allow_population_by_field_name = True

    error: Optional[str] = Field(None, description="Error text")
    valid: bool


class Context1(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: str = Field(
        ...,
        description="Credential context to match",
        example="https://myhost:8021",
        regex="^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$",
    )


class SchemaId1(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: str = Field(
        ...,
        description="Credential schema identifier",
        example="https://myhost:8021",
        regex="^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$",
    )


class Type(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: str = Field(
        ...,
        description="Credential type to match",
        example="https://myhost:8021",
        regex="^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$",
    )


class W3CCredentialsListRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    contexts: Optional[List[Context1]] = None
    given_id: Optional[str] = Field(None, description="Given credential id to match")
    issuer_id: Optional[str] = Field(
        None, description="Credential issuer identifier to match"
    )
    max_results: Optional[int] = Field(
        None, description="Maximum number of results to return"
    )
    proof_types: Optional[List[str]] = None
    schema_ids: Optional[List[SchemaId1]] = Field(
        None, description="Schema identifiers, all of which to match"
    )
    subject_ids: Optional[List[str]] = Field(
        None, description="Subject identifiers, all of which to match"
    )
    tag_query: Optional[Dict[str, str]] = Field(None, description="Tag filter")
    types: Optional[List[Type]] = None


class WalletModuleResponse(ActionMenuModulesResult):
    pass


class WalletRecord(BaseModel):
    class Config:
        allow_population_by_field_name = True

    created_at: Optional[str] = Field(
        None,
        description="Time of record creation",
        example="2021-12-31 23:59:59+00:00",
        regex="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    key_management_mode: Literal["managed", "unmanaged"] = Field(
        ..., description="Mode regarding management of wallet key"
    )
    settings: Optional[Dict[str, Any]] = Field(
        None, description="Settings for this wallet."
    )
    state: Optional[str] = Field(
        None, description="Current record state", example="active"
    )
    updated_at: Optional[str] = Field(
        None,
        description="Time of last record update",
        example="2021-12-31 23:59:59+00:00",
        regex="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    wallet_id: str = Field(
        ...,
        description="Wallet record ID",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )


class WriteLedgerRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    ledger_id: Optional[str] = None


class AttachDecoratorData1JWS(BaseModel):
    class Config:
        allow_population_by_field_name = True

    header: AttachDecoratorDataJWSHeader
    protected: Optional[str] = Field(
        None,
        description="protected JWS header",
        example="ey4uLn0",
        regex="^[-_a-zA-Z0-9]*$",
    )
    signature: str = Field(
        ..., description="signature", example="ey4uLn0", regex="^[-_a-zA-Z0-9]*$"
    )


class AttachDecoratorDataJWS(BaseModel):
    class Config:
        allow_population_by_field_name = True

    header: Optional[AttachDecoratorDataJWSHeader] = None
    protected: Optional[str] = Field(
        None,
        description="protected JWS header",
        example="ey4uLn0",
        regex="^[-_a-zA-Z0-9]*$",
    )
    signature: Optional[str] = Field(
        None, description="signature", example="ey4uLn0", regex="^[-_a-zA-Z0-9]*$"
    )
    signatures: Optional[List[AttachDecoratorData1JWS]] = Field(
        None, description="List of signatures"
    )


class CredDefValuePrimary(BaseModel):
    class Config:
        allow_population_by_field_name = True

    n: Optional[str] = Field(None, example="0", regex="^[0-9]*$")
    r: Optional[Generated] = None
    rctxt: Optional[str] = Field(None, example="0", regex="^[0-9]*$")
    s: Optional[str] = Field(None, example="0", regex="^[0-9]*$")
    z: Optional[str] = Field(None, example="0", regex="^[0-9]*$")


class CredInfoList(BaseModel):
    class Config:
        allow_population_by_field_name = True

    results: Optional[List[IndyCredInfo]] = None


class CredRevRecordDetailsResult(BaseModel):
    class Config:
        allow_population_by_field_name = True

    results: Optional[List[IssuerCredRevRecord]] = None


class CredRevRecordResult(BaseModel):
    class Config:
        allow_population_by_field_name = True

    result: Optional[IssuerCredRevRecord] = None


class Credential(BaseModel):
    class Config:
        allow_population_by_field_name = True

    context: List[Union[Dict[str, Any], str]] = Field(
        ...,
        alias="@context",
        description="The JSON-LD context of the credential",
        example=[
            "https://www.w3.org/2018/credentials/v1",
            "https://www.w3.org/2018/credentials/examples/v1",
        ],
    )
    credential_subject: Dict[str, Any] = Field(
        ..., alias="credentialSubject", example=""
    )
    expiration_date: Optional[str] = Field(
        None,
        alias="expirationDate",
        description="The expiration date",
        example="2010-01-01 19:23:24+00:00",
        regex="^([0-9]{4})-([0-9]{2})-([0-9]{2})([Tt ]([0-9]{2}):([0-9]{2}):([0-9]{2})(\\.[0-9]+)?)?(([Zz]|([+-])([0-9]{2}):([0-9]{2})))?$",
    )
    id: Optional[str] = Field(
        None,
        example="http://example.edu/credentials/1872",
        regex="\\w+:(\\/?\\/?)[^\\s]+",
    )
    issuance_date: str = Field(
        ...,
        alias="issuanceDate",
        description="The issuance date",
        example="2010-01-01 19:23:24+00:00",
        regex="^([0-9]{4})-([0-9]{2})-([0-9]{2})([Tt ]([0-9]{2}):([0-9]{2}):([0-9]{2})(\\.[0-9]+)?)?(([Zz]|([+-])([0-9]{2}):([0-9]{2})))?$",
    )
    issuer: Union[Dict[str, Any], str] = Field(
        ...,
        description="The JSON-LD Verifiable Credential Issuer. Either string of object with id field.",
        example="did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH",
    )
    proof: Optional[LinkedDataProof] = Field(
        None,
        description="The proof of the credential",
        example={
            "created": "2019-12-11 03:50:55",
            "jws": "eyJhbGciOiAiRWREU0EiLCAiYjY0IjogZmFsc2UsICJjcml0JiNjQiXX0..lKJU0Df_keblRKhZAS9Qq6zybm-HqUXNVZ8vgEPNTAjQKBhQDxvXNo7nvtUBb_Eq1Ch6YBKY5qBQ",
            "proofPurpose": "assertionMethod",
            "type": "Ed25519Signature2018",
            "verificationMethod": "did:key:z6Mkgg342Ycpuk263R9d8Aq6MUaxPn1DDeHyGo38EefXmgDL#z6Mkgg342Ycpuk263R9d8Aq6MUaxPn1DDeHyGo38EefXmgDL",
        },
    )
    type: List[str] = Field(
        ...,
        description="The JSON-LD type of the credential",
        example=["VerifiableCredential", "AlumniCredential"],
    )


class DIDCreate(BaseModel):
    class Config:
        allow_population_by_field_name = True

    method: Optional[str] = Field(
        None,
        description="Method for the requested DID.Supported methods are 'key', 'sov', and any other registered method.",
        example="sov",
    )
    options: Optional[DIDCreateOptions] = Field(
        None,
        description="To define a key type and/or a did depending on chosen DID method.",
    )
    seed: Optional[str] = Field(
        None,
        description="Optional seed to use for DID, Must beenabled in configuration before use.",
        example="000000000000000000000000Trustee1",
    )


class DIFField(BaseModel):
    class Config:
        allow_population_by_field_name = True

    filter: Optional[Filter] = None
    id: Optional[str] = Field(None, description="ID")
    path: Optional[List[str]] = None
    predicate: Optional[Literal["required", "preferred"]] = Field(
        None, description="Preference"
    )
    purpose: Optional[str] = Field(None, description="Purpose")


class Disclose(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        example="https://didcomm.org/my-family/1.0/my-message-type",
    )
    protocols: List[ProtocolDescriptor] = Field(
        ..., description="List of protocol descriptors"
    )


class Doc(BaseModel):
    class Config:
        allow_population_by_field_name = True

    credential: Dict[str, Any] = Field(..., description="Credential to sign")
    options: SignatureOptions = Field(..., description="Signature options")


class IndyCredAbstract(BaseModel):
    class Config:
        allow_population_by_field_name = True

    cred_def_id: str = Field(
        ...,
        description="Credential definition identifier",
        example="WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
        regex="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    key_correctness_proof: IndyKeyCorrectnessProof = Field(
        ..., description="Key correctness proof"
    )
    nonce: str = Field(
        ..., description="Nonce in credential abstract", example="0", regex="^[0-9]*$"
    )
    schema_id: str = Field(
        ...,
        description="Schema identifier",
        example="WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
        regex="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
    )


class IndyCredPrecis(BaseModel):
    class Config:
        allow_population_by_field_name = True

    cred_info: IndyCredInfo = Field(..., description="Credential info")
    interval: Optional[IndyNonRevocationInterval] = Field(
        None, description="Non-revocation interval from presentation request"
    )
    presentation_referents: List[str]


class IndyGEProof(BaseModel):
    class Config:
        allow_population_by_field_name = True

    alpha: Optional[str] = Field(None, example="0", regex="^[0-9]*$")
    mj: Optional[str] = Field(None, example="0", regex="^[0-9]*$")
    predicate: Optional[IndyGEProofPred] = None
    r: Optional[Dict[str, str]] = None
    t: Optional[Dict[str, str]] = None
    u: Optional[Dict[str, str]] = None


class IndyPresSpec(BaseModel):
    class Config:
        allow_population_by_field_name = True

    requested_attributes: Dict[str, IndyRequestedCredsRequestedAttr] = Field(
        ...,
        description="Nested object mapping proof request attribute referents to requested-attribute specifiers",
    )
    requested_predicates: Dict[str, IndyRequestedCredsRequestedPred] = Field(
        ...,
        description="Nested object mapping proof request predicate referents to requested-predicate specifiers",
    )
    self_attested_attributes: Dict[str, str] = Field(
        ..., description="Self-attested attributes to build into proof"
    )
    trace: Optional[bool] = Field(
        None, description="Whether to trace event (default false)", example=False
    )


class IndyPrimaryProof(BaseModel):
    class Config:
        allow_population_by_field_name = True

    eq_proof: Optional[IndyEQProof] = Field(None, description="Indy equality proof")
    ge_proofs: Optional[List[IndyGEProof]] = Field(None, description="Indy GE proofs")


class IndyProofProofProofsProof(BaseModel):
    class Config:
        allow_population_by_field_name = True

    non_revoc_proof: Optional[IndyNonRevocProof] = Field(
        None, description="Indy non-revocation proof"
    )
    primary_proof: Optional[IndyPrimaryProof] = Field(
        None, description="Indy primary proof"
    )


class IndyProofReqAttrSpec(BaseModel):
    class Config:
        allow_population_by_field_name = True

    name: Optional[str] = Field(
        None, description="Attribute name", example="favouriteDrink"
    )
    names: Optional[List[str]] = Field(None, description="Attribute name group")
    non_revoked: Optional[IndyProofReqAttrSpecNonRevoked] = None
    restrictions: Optional[List[Dict[str, str]]] = Field(
        None,
        description="If present, credential must satisfy one of given restrictions: specify schema_id, schema_issuer_did, schema_name, schema_version, issuer_did, cred_def_id, and/or attr::<attribute-name>::value where <attribute-name> represents a credential attribute name",
    )


class IndyProofReqPredSpec(BaseModel):
    class Config:
        allow_population_by_field_name = True

    name: str = Field(..., description="Attribute name", example="index")
    non_revoked: Optional[IndyProofReqPredSpecNonRevoked] = None
    p_type: Literal["<", "<=", ">=", ">"] = Field(
        ..., description="Predicate type ('<', '<=', '>=', or '>')", example=">="
    )
    p_value: int = Field(..., description="Threshold value")
    restrictions: Optional[List[Dict[str, str]]] = Field(
        None,
        description="If present, credential must satisfy one of given restrictions: specify schema_id, schema_issuer_did, schema_name, schema_version, issuer_did, cred_def_id, and/or attr::<attribute-name>::value where <attribute-name> represents a credential attribute name",
    )


class IndyProofRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    name: Optional[str] = Field(
        None, description="Proof request name", example="Proof request"
    )
    non_revoked: Optional[IndyProofRequestNonRevoked] = None
    nonce: Optional[str] = Field(
        None, description="Nonce", example="1", regex="^[1-9][0-9]*$"
    )
    requested_attributes: Dict[str, IndyProofReqAttrSpec] = Field(
        ..., description="Requested attribute specifications of proof request"
    )
    requested_predicates: Dict[str, IndyProofReqPredSpec] = Field(
        ..., description="Requested predicate specifications of proof request"
    )
    version: Optional[str] = Field(
        None, description="Proof request version", example="1.0", regex="^[0-9.]+$"
    )


class IndyProofRequestedProofRevealedAttrGroup(BaseModel):
    class Config:
        allow_population_by_field_name = True

    sub_proof_index: Optional[int] = Field(None, description="Sub-proof index")
    values: Optional[Dict[str, RawEncoded]] = Field(
        None, description="Indy proof requested proof revealed attr groups group value"
    )


class IndyRevRegDefValuePublicKeys(BaseModel):
    class Config:
        allow_population_by_field_name = True

    accum_key: Optional[IndyRevRegDefValuePublicKeysAccumKey] = Field(
        None, alias="accumKey"
    )


class IndyRevRegEntry(BaseModel):
    class Config:
        allow_population_by_field_name = True

    value: Optional[IndyRevRegEntryValue] = Field(
        None, description="Revocation registry entry value"
    )
    ver: Optional[str] = Field(
        None,
        description="Version of revocation registry entry",
        example="1.0",
        regex="^[0-9.]+$",
    )


class Keylist(BaseModel):
    class Config:
        allow_population_by_field_name = True

    results: Optional[List[RouteRecord]] = Field(
        None, description="List of keylist records"
    )


class KeylistQuery(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        example="https://didcomm.org/my-family/1.0/my-message-type",
    )
    filter: Optional[Dict[str, Any]] = Field(
        None, description="Query dictionary object", example={"filter": {}}
    )
    paginate: Optional[KeylistQueryPaginate] = Field(
        None, description="Pagination info"
    )


class KeylistUpdate(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        example="https://didcomm.org/my-family/1.0/my-message-type",
    )
    updates: Optional[List[KeylistUpdateRule]] = Field(
        None, description="List of update rules"
    )


class KeylistUpdateRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    updates: Optional[List[KeylistUpdateRule]] = None


class LDProofVCDetail(BaseModel):
    class Config:
        allow_population_by_field_name = True

    credential: Credential = Field(
        ...,
        description="Detail of the JSON-LD Credential to be issued",
        example={
            "@context": [
                "https://www.w3.org/2018/credentials/v1",
                "https://w3id.org/citizenship/v1",
            ],
            "credentialSubject": {
                "familyName": "SMITH",
                "gender": "Male",
                "givenName": "JOHN",
                "type": ["PermanentResident", "Person"],
            },
            "description": "Government of Example Permanent Resident Card.",
            "identifier": "83627465",
            "issuanceDate": "2019-12-03 12:19:52+00:00",
            "issuer": "did:key:z6MkmjY8GnV5i9YTDtPETC2uUAW6ejw3nk5mXF5yci5ab7th",
            "name": "Permanent Resident Card",
            "type": ["VerifiableCredential", "PermanentResidentCard"],
        },
    )
    options: LDProofVCDetailOptions = Field(
        ...,
        description="Options for specifying how the linked data proof is created.",
        example={"proofType": "Ed25519Signature2018"},
    )


class MediationList(BaseModel):
    class Config:
        allow_population_by_field_name = True

    results: Optional[List[MediationRecord]] = Field(
        None, description="List of mediation records"
    )


class MenuForm(BaseModel):
    class Config:
        allow_population_by_field_name = True

    description: Optional[str] = Field(
        None,
        description="Additional descriptive text for menu form",
        example="Window preference settings",
    )
    params: Optional[List[MenuFormParam]] = Field(
        None, description="List of form parameters"
    )
    submit_label: Optional[str] = Field(
        None,
        alias="submit-label",
        description="Alternative label for form submit button",
        example="Send",
    )
    title: Optional[str] = Field(
        None, description="Menu form title", example="Preferences"
    )


class MenuOption(BaseModel):
    class Config:
        allow_population_by_field_name = True

    description: Optional[str] = Field(
        None,
        description="Additional descriptive text for menu option",
        example="Window display preferences",
    )
    disabled: Optional[bool] = Field(
        None, description="Whether to show option as disabled", example=False
    )
    form: Optional[MenuForm] = None
    name: str = Field(
        ..., description="Menu option name (unique identifier)", example="window_prefs"
    )
    title: str = Field(
        ..., description="Menu option title", example="Window Preferences"
    )


class Queries(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        example="https://didcomm.org/my-family/1.0/my-message-type",
    )
    queries: Optional[List[QueryItem]] = None


class SignRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    doc: Doc
    verkey: str = Field(..., description="Verkey to use for signing")


class TAAInfo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    aml_record: Optional[AMLRecord] = None
    taa_accepted: Optional[TAAAcceptance] = None
    taa_record: Optional[TAARecord] = None
    taa_required: Optional[bool] = None


class TAAResult(BaseModel):
    class Config:
        allow_population_by_field_name = True

    result: Optional[TAAInfo] = None


class TransactionList(BaseModel):
    class Config:
        allow_population_by_field_name = True

    results: Optional[List[TransactionRecord]] = Field(
        None, description="List of transaction records"
    )


class V10DiscoveryRecord(BaseModel):
    class Config:
        allow_population_by_field_name = True

    connection_id: Optional[str] = Field(
        None,
        description="Connection identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    created_at: Optional[str] = Field(
        None,
        description="Time of record creation",
        example="2021-12-31 23:59:59+00:00",
        regex="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    disclose: Optional[Disclose] = Field(None, description="Disclose message")
    discovery_exchange_id: Optional[str] = Field(
        None,
        description="Credential exchange identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    query_msg: Optional[Query] = Field(None, description="Query message")
    state: Optional[str] = Field(
        None, description="Current record state", example="active"
    )
    thread_id: Optional[str] = Field(
        None,
        description="Thread identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    trace: Optional[bool] = Field(
        None, description="Record trace information, based on agent configuration"
    )
    updated_at: Optional[str] = Field(
        None,
        description="Time of last record update",
        example="2021-12-31 23:59:59+00:00",
        regex="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )


class V10PresentationCreateRequestRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    auto_verify: Optional[bool] = Field(
        None,
        description="Verifier choice to auto-verify proof presentation",
        example=False,
    )
    comment: Optional[str] = None
    proof_request: IndyProofRequest
    trace: Optional[bool] = Field(
        None, description="Whether to trace event (default false)", example=False
    )


class V10PresentationSendRequestRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    auto_verify: Optional[bool] = Field(
        None,
        description="Verifier choice to auto-verify proof presentation",
        example=False,
    )
    comment: Optional[str] = None
    connection_id: str = Field(
        ...,
        description="Connection identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    proof_request: IndyProofRequest
    trace: Optional[bool] = Field(
        None, description="Whether to trace event (default false)", example=False
    )


class V20CredFilter(BaseModel):
    class Config:
        allow_population_by_field_name = True

    indy: Optional[V20CredFilterIndy] = Field(
        None, description="Credential filter for indy"
    )
    ld_proof: Optional[LDProofVCDetail] = Field(
        None, description="Credential filter for linked data proof"
    )


class V20CredFilterLDProof(BaseModel):
    class Config:
        allow_population_by_field_name = True

    ld_proof: LDProofVCDetail = Field(
        ..., description="Credential filter for linked data proof"
    )


class V20CredOfferConnFreeRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    auto_issue: Optional[bool] = Field(
        None,
        description="Whether to respond automatically to credential requests, creating and issuing requested credentials",
    )
    auto_remove: Optional[bool] = Field(
        None,
        description="Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    credential_preview: Optional[V20CredPreview] = None
    filter: V20CredFilter = Field(
        ..., description="Credential specification criteria by format"
    )
    trace: Optional[bool] = Field(
        None, description="Record trace information, based on agent configuration"
    )


class V20CredOfferRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    auto_issue: Optional[bool] = Field(
        None,
        description="Whether to respond automatically to credential requests, creating and issuing requested credentials",
    )
    auto_remove: Optional[bool] = Field(
        None,
        description="Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    connection_id: str = Field(
        ...,
        description="Connection identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    credential_preview: Optional[V20CredPreview] = None
    filter: V20CredFilter = Field(
        ..., description="Credential specification criteria by format"
    )
    trace: Optional[bool] = Field(
        None, description="Record trace information, based on agent configuration"
    )


class V20CredRequestFree(BaseModel):
    class Config:
        allow_population_by_field_name = True

    auto_remove: Optional[bool] = Field(
        None,
        description="Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    connection_id: str = Field(
        ...,
        description="Connection identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    filter: V20CredFilterLDProof = Field(
        ..., description="Credential specification criteria by format"
    )
    holder_did: Optional[str] = Field(
        None,
        description="Holder DID to substitute for the credentialSubject.id",
        example="did:key:ahsdkjahsdkjhaskjdhakjshdkajhsdkjahs",
    )
    trace: Optional[bool] = Field(
        None, description="Whether to trace event (default false)", example=False
    )


class V20DiscoveryRecord(BaseModel):
    class Config:
        allow_population_by_field_name = True

    connection_id: Optional[str] = Field(
        None,
        description="Connection identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    created_at: Optional[str] = Field(
        None,
        description="Time of record creation",
        example="2021-12-31 23:59:59+00:00",
        regex="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    disclosures: Optional[Disclosures] = Field(None, description="Disclosures message")
    discovery_exchange_id: Optional[str] = Field(
        None,
        description="Credential exchange identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    queries_msg: Optional[Queries] = Field(None, description="Queries message")
    state: Optional[str] = Field(
        None, description="Current record state", example="active"
    )
    thread_id: Optional[str] = Field(
        None,
        description="Thread identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    trace: Optional[bool] = Field(
        None, description="Record trace information, based on agent configuration"
    )
    updated_at: Optional[str] = Field(
        None,
        description="Time of last record update",
        example="2021-12-31 23:59:59+00:00",
        regex="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )


class V20IssueCredSchemaCore(BaseModel):
    class Config:
        allow_population_by_field_name = True

    auto_remove: Optional[bool] = Field(
        None,
        description="Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    credential_preview: Optional[V20CredPreview] = None
    filter: V20CredFilter = Field(
        ..., description="Credential specification criteria by format"
    )
    trace: Optional[bool] = Field(
        None, description="Record trace information, based on agent configuration"
    )


class WalletList(BaseModel):
    class Config:
        allow_population_by_field_name = True

    results: Optional[List[WalletRecord]] = Field(
        None, description="List of wallet records"
    )


class AttachDecoratorData(BaseModel):
    class Config:
        allow_population_by_field_name = True

    base64: Optional[str] = Field(
        None,
        description="Base64-encoded data",
        example="ey4uLn0=",
        regex="^[a-zA-Z0-9+/]*={0,2}$",
    )
    json_: Optional[Dict[str, Any]] = Field(
        None,
        alias="json",
        description="JSON-serialized data",
        example='{"sample": "content"}',
    )
    jws: Optional[AttachDecoratorDataJWS] = Field(
        None, description="Detached Java Web Signature"
    )
    links: Optional[List[str]] = Field(
        None, description="List of hypertext links to data"
    )
    sha256: Optional[str] = Field(
        None,
        description="SHA256 hash (binhex encoded) of content",
        example="617a48c7c8afe0521efdc03e5bb0ad9e655893e6b4b51f0e794d70fba132aacb",
        regex="^[a-fA-F0-9+/]{64}$",
    )


class Constraints(BaseModel):
    class Config:
        allow_population_by_field_name = True

    fields: Optional[List[DIFField]] = None
    is_holder: Optional[List[DIFHolder]] = None
    limit_disclosure: Optional[str] = Field(None, description="LimitDisclosure")
    status_active: Optional[Literal["required", "allowed", "disallowed"]] = None
    status_revoked: Optional[Literal["required", "allowed", "disallowed"]] = None
    status_suspended: Optional[Literal["required", "allowed", "disallowed"]] = None
    subject_is_issuer: Optional[Literal["required", "preferred"]] = Field(
        None, description="SubjectIsIssuer"
    )


class CredDefValue(BaseModel):
    class Config:
        allow_population_by_field_name = True

    primary: Optional[CredDefValuePrimary] = Field(
        None, description="Primary value for credential definition"
    )
    revocation: Optional[CredDefValueRevocation] = Field(
        None, description="Revocation value for credential definition"
    )


class CredentialDefinition(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: Optional[str] = Field(
        None,
        description="Credential definition identifier",
        example="WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
        regex="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    schema_id: Optional[str] = Field(
        None,
        alias="schemaId",
        description="Schema identifier within credential definition identifier",
        example="20",
    )
    tag: Optional[str] = Field(
        None, description="Tag within credential definition identifier", example="tag"
    )
    type: Optional[Dict[str, Any]] = Field(
        None, description="Signature type: CL for Camenisch-Lysyanskaya", example="CL"
    )
    value: Optional[CredDefValue] = Field(
        None, description="Credential definition primary and revocation values"
    )
    ver: Optional[str] = Field(
        None, description="Node protocol version", example="1.0", regex="^[0-9.]+$"
    )


class CredentialDefinitionGetResult(BaseModel):
    class Config:
        allow_population_by_field_name = True

    credential_definition: Optional[CredentialDefinition] = None


class IndyProofProof(BaseModel):
    class Config:
        allow_population_by_field_name = True

    aggregated_proof: Optional[IndyProofProofAggregatedProof] = Field(
        None, description="Indy proof aggregated proof"
    )
    proofs: Optional[List[IndyProofProofProofsProof]] = Field(
        None, description="Indy proof proofs"
    )


class IndyProofRequestedProof(BaseModel):
    class Config:
        allow_population_by_field_name = True

    predicates: Optional[Dict[str, IndyProofRequestedProofPredicate]] = Field(
        None, description="Proof requested proof predicates."
    )
    revealed_attr_groups: Optional[
        Dict[str, IndyProofRequestedProofRevealedAttrGroup]
    ] = Field(None, description="Proof requested proof revealed attribute groups")
    revealed_attrs: Optional[Dict[str, IndyProofRequestedProofRevealedAttr]] = Field(
        None, description="Proof requested proof revealed attributes"
    )
    self_attested_attrs: Optional[Dict[str, Any]] = Field(
        None, description="Proof requested proof self-attested attributes"
    )
    unrevealed_attrs: Optional[Dict[str, Any]] = Field(
        None, description="Unrevealed attributes"
    )


class IndyRevRegDefValue(BaseModel):
    class Config:
        allow_population_by_field_name = True

    issuance_type: Optional[
        Literal["ISSUANCE_ON_DEMAND", "ISSUANCE_BY_DEFAULT"]
    ] = Field(None, alias="issuanceType", description="Issuance type")
    max_cred_num: Optional[int] = Field(
        None,
        alias="maxCredNum",
        description="Maximum number of credentials; registry size",
        example=10,
        ge=1,
    )
    public_keys: Optional[IndyRevRegDefValuePublicKeys] = Field(
        None, alias="publicKeys", description="Public keys"
    )
    tails_hash: Optional[str] = Field(
        None,
        alias="tailsHash",
        description="Tails hash value",
        example="H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
        regex="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$",
    )
    tails_location: Optional[str] = Field(
        None, alias="tailsLocation", description="Tails file location"
    )


class InputDescriptors(BaseModel):
    class Config:
        allow_population_by_field_name = True

    constraints: Optional[Constraints] = None
    group: Optional[List[str]] = None
    id: Optional[str] = Field(None, description="ID")
    metadata: Optional[Dict[str, Any]] = Field(None, description="Metadata dictionary")
    name: Optional[str] = Field(None, description="Name")
    purpose: Optional[str] = Field(None, description="Purpose")
    schema_: Optional[SchemasInputDescriptorFilter] = Field(
        None,
        alias="schema",
        description="Accepts a list of schema or a dict containing filters like oneof_filter.",
        example={
            "oneof_filter": [
                [
                    {"uri": "https://www.w3.org/Test1#Test1"},
                    {"uri": "https://www.w3.org/Test2#Test2"},
                ],
                {
                    "oneof_filter": [
                        [{"uri": "https://www.w3.org/Test1#Test1"}],
                        [{"uri": "https://www.w3.org/Test2#Test2"}],
                    ]
                },
            ]
        },
    )


class Menu(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        example="https://didcomm.org/my-family/1.0/my-message-type",
    )
    description: Optional[str] = Field(
        None,
        description="Introductory text for the menu",
        example="This menu presents options",
    )
    errormsg: Optional[str] = Field(
        None,
        description="An optional error message to display in menu header",
        example="Error: item not found",
    )
    options: List[MenuOption] = Field(..., description="List of menu options")
    title: Optional[str] = Field(None, description="Menu title", example="My Menu")


class MenuJson(BaseModel):
    class Config:
        allow_population_by_field_name = True

    description: Optional[str] = Field(
        None,
        description="Introductory text for the menu",
        example="User preferences for window settings",
    )
    errormsg: Optional[str] = Field(
        None,
        description="Optional error message to display in menu header",
        example="Error: item not present",
    )
    options: List[MenuOption] = Field(..., description="List of menu options")
    title: Optional[str] = Field(None, description="Menu title", example="My Menu")


class PresentationDefinition(BaseModel):
    class Config:
        allow_population_by_field_name = True

    format: Optional[ClaimFormat] = None
    id: Optional[str] = Field(
        None,
        description="Unique Resource Identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
        regex="[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
    )
    input_descriptors: Optional[List[InputDescriptors]] = None
    name: Optional[str] = Field(
        None,
        description="Human-friendly name that describes what the presentation definition pertains to",
    )
    purpose: Optional[str] = Field(
        None,
        description="Describes the purpose for which the Presentation Definition's inputs are being requested",
    )
    submission_requirements: Optional[List[SubmissionRequirements]] = None


class SendMenu(BaseModel):
    class Config:
        allow_population_by_field_name = True

    menu: MenuJson = Field(..., description="Menu to send to connection")


class V10DiscoveryExchangeListResult(BaseModel):
    class Config:
        allow_population_by_field_name = True

    results: Optional[List[V10DiscoveryRecord]] = None


class V20CredBoundOfferRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    counter_preview: Optional[V20CredPreview] = Field(
        None, description="Optional content for counter-proposal"
    )
    filter: Optional[V20CredFilter] = Field(
        None, description="Credential specification criteria by format"
    )


class V20CredExFree(BaseModel):
    class Config:
        allow_population_by_field_name = True

    auto_remove: Optional[bool] = Field(
        None,
        description="Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    connection_id: str = Field(
        ...,
        description="Connection identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    credential_preview: Optional[V20CredPreview] = None
    filter: V20CredFilter = Field(
        ..., description="Credential specification criteria by format"
    )
    trace: Optional[bool] = Field(
        None, description="Record trace information, based on agent configuration"
    )
    verification_method: Optional[str] = Field(
        None, description="For ld-proofs. Verification method for signing."
    )


class V20DiscoveryExchangeListResult(BaseModel):
    class Config:
        allow_population_by_field_name = True

    results: Optional[List[V20DiscoveryRecord]] = None


class V20DiscoveryExchangeResult(BaseModel):
    class Config:
        allow_population_by_field_name = True

    results: Optional[V20DiscoveryRecord] = Field(
        None, description="Discover Features v2.0 exchange record"
    )


class ActionMenuFetchResult(BaseModel):
    class Config:
        allow_population_by_field_name = True

    result: Optional[Menu] = Field(None, description="Action menu")


class AttachDecorator(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Attachment identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    byte_count: Optional[int] = Field(
        None, description="Byte count of data included by reference", example=1234
    )
    data: AttachDecoratorData
    description: Optional[str] = Field(
        None,
        description="Human-readable description of content",
        example="view from doorway, facing east, with lights off",
    )
    filename: Optional[str] = Field(
        None, description="File name", example="IMG1092348.png"
    )
    lastmod_time: Optional[str] = Field(
        None,
        description="Hint regarding last modification datetime, in ISO-8601 format",
        example="2021-12-31 23:59:59+00:00",
        regex="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    mime_type: Optional[str] = Field(
        None, alias="mime-type", description="MIME type", example="image/png"
    )


class CredentialOffer(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        example="https://didcomm.org/my-family/1.0/my-message-type",
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    credential_preview: Optional[CredentialPreview] = None
    offers_attach: List[AttachDecorator] = Field(..., alias="offers~attach")


class DIDXRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        example="https://didcomm.org/my-family/1.0/my-message-type",
    )
    did: Optional[str] = Field(
        None,
        description="DID of exchange",
        example="WgWxqztrNooG92RXvxSTWv",
        regex="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )
    did_doc_attach: Optional[AttachDecorator] = Field(
        None,
        alias="did_doc~attach",
        description="As signed attachment, DID Doc associated with DID",
    )
    label: str = Field(
        ...,
        description="Label for DID exchange request",
        example="Request to connect with Bob",
    )


class DIFPresSpec(BaseModel):
    class Config:
        allow_population_by_field_name = True

    issuer_id: Optional[str] = Field(
        None,
        description="Issuer identifier to sign the presentation, if different from current public DID",
    )
    presentation_definition: Optional[PresentationDefinition] = None
    record_ids: Optional[Dict[str, Any]] = Field(
        None,
        description="Mapping of input_descriptor id to list of stored W3C credential record_id",
        example={
            "<input descriptor id_1>": ["<record id_1>", "<record id_2>"],
            "<input descriptor id_2>": ["<record id>"],
        },
    )
    reveal_doc: Optional[Dict[str, Any]] = Field(
        None,
        description="reveal doc [JSON-LD frame] dict used to derive the credential when selective disclosure is required",
        example={
            "@context": [
                "https://www.w3.org/2018/credentials/v1",
                "https://w3id.org/security/bbs/v1",
            ],
            "@explicit": True,
            "@requireAll": True,
            "credentialSubject": {
                "@explicit": True,
                "@requireAll": True,
                "Observation": [
                    {"effectiveDateTime": {}, "@explicit": True, "@requireAll": True}
                ],
            },
            "issuanceDate": {},
            "issuer": {},
            "type": ["VerifiableCredential", "LabReport"],
        },
    )


class DIFProofProposal(BaseModel):
    class Config:
        allow_population_by_field_name = True

    input_descriptors: Optional[List[InputDescriptors]] = None
    options: Optional[DIFOptions] = None


class DIFProofRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    options: Optional[DIFOptions] = None
    presentation_definition: PresentationDefinition


class IndyProof(BaseModel):
    class Config:
        allow_population_by_field_name = True

    identifiers: Optional[List[IndyProofIdentifier]] = Field(
        None, description="Indy proof.identifiers content"
    )
    proof: Optional[IndyProofProof] = Field(
        None, description="Indy proof.proof content"
    )
    requested_proof: Optional[IndyProofRequestedProof] = Field(
        None, description="Indy proof.requested_proof content"
    )


class IndyRevRegDef(BaseModel):
    class Config:
        allow_population_by_field_name = True

    cred_def_id: Optional[str] = Field(
        None,
        alias="credDefId",
        description="Credential definition identifier",
        example="WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
        regex="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    id: Optional[str] = Field(
        None,
        description="Indy revocation registry identifier",
        example="WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
        regex="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)",
    )
    revoc_def_type: Optional[Literal["CL_ACCUM"]] = Field(
        None,
        alias="revocDefType",
        description="Revocation registry type (specify CL_ACCUM)",
        example="CL_ACCUM",
    )
    tag: Optional[str] = Field(None, description="Revocation registry tag")
    value: Optional[IndyRevRegDefValue] = Field(
        None, description="Revocation registry definition value"
    )
    ver: Optional[str] = Field(
        None,
        description="Version of revocation registry definition",
        example="1.0",
        regex="^[0-9.]+$",
    )


class InvitationMessage(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: str = Field(
        ...,
        alias="@id",
        description="Message identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    type: str = Field(
        ...,
        alias="@type",
        description="Message type",
        example="https://didcomm.org/my-family/1.0/my-message-type",
    )
    accept: Optional[List[str]] = Field(
        None,
        description="List of mime type in order of preference",
        example=["didcomm/aip1", "didcomm/aip2;env=rfc19"],
    )
    handshake_protocols: List[str]
    image_url: Optional[str] = Field(
        None,
        alias="imageUrl",
        description="Optional image URL for out-of-band invitation",
        example="http://192.168.56.101/img/logo.jpg",
    )
    label: Optional[str] = Field(None, description="Optional label", example="Bob")
    requests_attach: Optional[List[AttachDecorator]] = Field(
        None, alias="requests~attach", description="Optional request attachment"
    )
    services: List[Union[Dict[str, Any], str]] = Field(
        ...,
        example=[
            {
                "did": "WgWxqztrNooG92RXvxSTWv",
                "id": "string",
                "recipientKeys": [
                    "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                ],
                "routingKeys": [
                    "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                ],
                "serviceEndpoint": "http://192.168.56.101:8020",
                "type": "string",
            },
            "did:sov:WgWxqztrNooG92RXvxSTWv",
        ],
    )


class InvitationRecord(BaseModel):
    class Config:
        allow_population_by_field_name = True

    created_at: Optional[str] = Field(
        None,
        description="Time of record creation",
        example="2021-12-31 23:59:59+00:00",
        regex="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    invi_msg_id: str = Field(
        ...,
        description="Invitation message identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    invitation: InvitationMessage = Field(
        ..., description="Out of band invitation message"
    )
    invitation_id: Optional[str] = Field(
        None,
        description="Invitation record identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    invitation_url: str = Field(
        ...,
        description="Invitation message URL",
        example="https://example.com/endpoint?c_i=eyJAdHlwZSI6ICIuLi4iLCAiLi4uIjogIi4uLiJ9XX0=",
    )
    oob_id: str = Field(
        ...,
        description="Out of band record identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    state: str = Field(
        ..., description="Out of band message exchange state", example="await_response"
    )
    trace: Optional[bool] = Field(
        None, description="Record trace information, based on agent configuration"
    )
    updated_at: Optional[str] = Field(
        None,
        description="Time of last record update",
        example="2021-12-31 23:59:59+00:00",
        regex="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )


class IssuerRevRegRecord(BaseModel):
    class Config:
        allow_population_by_field_name = True

    created_at: Optional[str] = Field(
        None,
        description="Time of record creation",
        example="2021-12-31 23:59:59+00:00",
        regex="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    cred_def_id: Optional[str] = Field(
        None,
        description="Credential definition identifier",
        example="WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
        regex="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    error_msg: Optional[str] = Field(
        None, description="Error message", example="Revocation registry undefined"
    )
    issuer_did: Optional[str] = Field(
        None,
        description="Issuer DID",
        example="WgWxqztrNooG92RXvxSTWv",
        regex="^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
    )
    max_cred_num: Optional[int] = Field(
        None,
        description="Maximum number of credentials for revocation registry",
        example=1000,
    )
    pending_pub: Optional[List[str]] = Field(
        None,
        description="Credential revocation identifier for credential revoked and pending publication to ledger",
    )
    record_id: Optional[str] = Field(
        None,
        description="Issuer revocation registry record identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    revoc_def_type: Optional[Literal["CL_ACCUM"]] = Field(
        None,
        description="Revocation registry type (specify CL_ACCUM)",
        example="CL_ACCUM",
    )
    revoc_reg_def: Optional[IndyRevRegDef] = Field(
        None, description="Revocation registry definition"
    )
    revoc_reg_entry: Optional[IndyRevRegEntry] = Field(
        None, description="Revocation registry entry"
    )
    revoc_reg_id: Optional[str] = Field(
        None,
        description="Revocation registry identifier",
        example="WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
        regex="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)",
    )
    state: Optional[str] = Field(
        None, description="Issue revocation registry record state", example="active"
    )
    tag: Optional[str] = Field(
        None, description="Tag within issuer revocation registry identifier"
    )
    tails_hash: Optional[str] = Field(
        None,
        description="Tails hash",
        example="H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
        regex="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$",
    )
    tails_local_path: Optional[str] = Field(
        None, description="Local path to tails file"
    )
    tails_public_uri: Optional[str] = Field(
        None, description="Public URI for tails file"
    )
    updated_at: Optional[str] = Field(
        None,
        description="Time of last record update",
        example="2021-12-31 23:59:59+00:00",
        regex="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )


class OobRecord(BaseModel):
    class Config:
        allow_population_by_field_name = True

    attach_thread_id: Optional[str] = Field(
        None,
        description="Connection record identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    connection_id: Optional[str] = Field(
        None,
        description="Connection record identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    created_at: Optional[str] = Field(
        None,
        description="Time of record creation",
        example="2021-12-31 23:59:59+00:00",
        regex="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    invi_msg_id: str = Field(
        ...,
        description="Invitation message identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    invitation: InvitationMessage = Field(
        ..., description="Out of band invitation message"
    )
    oob_id: str = Field(
        ...,
        description="Oob record identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    our_recipient_key: Optional[str] = Field(
        None,
        description="Recipient key used for oob invitation",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    role: Optional[Literal["sender", "receiver"]] = Field(
        None, description="OOB Role", example="receiver"
    )
    state: Literal[
        "initial",
        "prepare-response",
        "await-response",
        "reuse-not-accepted",
        "reuse-accepted",
        "done",
        "deleted",
    ] = Field(
        ..., description="Out of band message exchange state", example="await-response"
    )
    their_service: Optional[ServiceDecorator] = None
    trace: Optional[bool] = Field(
        None, description="Record trace information, based on agent configuration"
    )
    updated_at: Optional[str] = Field(
        None,
        description="Time of last record update",
        example="2021-12-31 23:59:59+00:00",
        regex="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )


class PresentationRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        example="https://didcomm.org/my-family/1.0/my-message-type",
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    request_presentations_attach: List[AttachDecorator] = Field(
        ..., alias="request_presentations~attach"
    )


class RevRegResult(BaseModel):
    class Config:
        allow_population_by_field_name = True

    result: IssuerRevRegRecord


class TxnOrRevRegResult(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    sent: Optional[RevRegResult] = None
    txn: Optional[TransactionRecord] = Field(
        None, description="Revocation registry definition transaction to endorse"
    )


class V10CredentialExchange(BaseModel):
    class Config:
        allow_population_by_field_name = True

    auto_issue: Optional[bool] = Field(
        None,
        description="Issuer choice to issue to request in this credential exchange",
        example=False,
    )
    auto_offer: Optional[bool] = Field(
        None,
        description="Holder choice to accept offer in this credential exchange",
        example=False,
    )
    auto_remove: Optional[bool] = Field(
        None,
        description="Issuer choice to remove this credential exchange record when complete",
        example=False,
    )
    connection_id: Optional[str] = Field(
        None,
        description="Connection identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    created_at: Optional[str] = Field(
        None,
        description="Time of record creation",
        example="2021-12-31 23:59:59+00:00",
        regex="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    credential: Optional[IndyCredInfo] = Field(None, description="Credential as stored")
    credential_definition_id: Optional[str] = Field(
        None,
        description="Credential definition identifier",
        example="WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
        regex="^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
    )
    credential_exchange_id: Optional[str] = Field(
        None,
        description="Credential exchange identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    credential_id: Optional[str] = Field(
        None,
        description="Credential identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    credential_offer: Optional[IndyCredAbstract] = Field(
        None, description="(Indy) credential offer"
    )
    credential_offer_dict: Optional[CredentialOffer] = Field(
        None, description="Credential offer message"
    )
    credential_proposal_dict: Optional[CredentialProposal] = Field(
        None, description="Credential proposal message"
    )
    credential_request: Optional[IndyCredRequest] = Field(
        None, description="(Indy) credential request"
    )
    credential_request_metadata: Optional[Dict[str, Any]] = Field(
        None, description="(Indy) credential request metadata"
    )
    error_msg: Optional[str] = Field(
        None,
        description="Error message",
        example="Credential definition identifier is not set in proposal",
    )
    initiator: Optional[Literal["self", "external"]] = Field(
        None,
        description="Issue-credential exchange initiator: self or external",
        example="self",
    )
    parent_thread_id: Optional[str] = Field(
        None,
        description="Parent thread identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    raw_credential: Optional[IndyCredential] = Field(
        None, description="Credential as received, prior to storage in holder wallet"
    )
    revoc_reg_id: Optional[str] = Field(
        None, description="Revocation registry identifier"
    )
    revocation_id: Optional[str] = Field(
        None, description="Credential identifier within revocation registry"
    )
    role: Optional[Literal["holder", "issuer"]] = Field(
        None,
        description="Issue-credential exchange role: holder or issuer",
        example="issuer",
    )
    schema_id: Optional[str] = Field(
        None,
        description="Schema identifier",
        example="WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
        regex="^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
    )
    state: Optional[str] = Field(
        None, description="Issue-credential exchange state", example="credential_acked"
    )
    thread_id: Optional[str] = Field(
        None,
        description="Thread identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    trace: Optional[bool] = Field(
        None, description="Record trace information, based on agent configuration"
    )
    updated_at: Optional[str] = Field(
        None,
        description="Time of last record update",
        example="2021-12-31 23:59:59+00:00",
        regex="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )


class V10CredentialExchangeListResult(BaseModel):
    class Config:
        allow_population_by_field_name = True

    results: Optional[List[V10CredentialExchange]] = Field(
        None, description="Aries#0036 v1.0 credential exchange records"
    )


class V10PresentationExchange(BaseModel):
    class Config:
        allow_population_by_field_name = True

    auto_present: Optional[bool] = Field(
        None,
        description="Prover choice to auto-present proof as verifier requests",
        example=False,
    )
    auto_verify: Optional[bool] = Field(
        None, description="Verifier choice to auto-verify proof presentation"
    )
    connection_id: Optional[str] = Field(
        None,
        description="Connection identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    created_at: Optional[str] = Field(
        None,
        description="Time of record creation",
        example="2021-12-31 23:59:59+00:00",
        regex="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    error_msg: Optional[str] = Field(
        None, description="Error message", example="Invalid structure"
    )
    initiator: Optional[Literal["self", "external"]] = Field(
        None,
        description="Present-proof exchange initiator: self or external",
        example="self",
    )
    presentation: Optional[IndyProof] = Field(
        None, description="(Indy) presentation (also known as proof)"
    )
    presentation_exchange_id: str = Field(
        ...,
        description="Presentation exchange identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    presentation_proposal_dict: Optional[PresentationProposal] = Field(
        None, description="Presentation proposal message"
    )
    presentation_request: Optional[IndyProofRequest] = Field(
        None, description="(Indy) presentation request (also known as proof request)"
    )
    presentation_request_dict: Optional[PresentationRequest] = Field(
        None, description="Presentation request message"
    )
    role: Optional[Literal["prover", "verifier"]] = Field(
        None,
        description="Present-proof exchange role: prover or verifier",
        example="prover",
    )
    state: Optional[str] = Field(
        None, description="Present-proof exchange state", example="verified"
    )
    thread_id: Optional[str] = Field(
        None,
        description="Thread identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    trace: Optional[bool] = Field(
        None, description="Record trace information, based on agent configuration"
    )
    updated_at: Optional[str] = Field(
        None,
        description="Time of last record update",
        example="2021-12-31 23:59:59+00:00",
        regex="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    verified: Optional[Literal["true", "false"]] = Field(
        None,
        description="Whether presentation is verified: true or false",
        example="true",
    )
    verified_msgs: Optional[List[str]] = None


class V10PresentationExchangeList(BaseModel):
    class Config:
        allow_population_by_field_name = True

    results: Optional[List[V10PresentationExchange]] = Field(
        None, description="Aries RFC 37 v1.0 presentation exchange records"
    )


class V20CredIssue(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        example="https://didcomm.org/my-family/1.0/my-message-type",
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    credentials_attach: List[AttachDecorator] = Field(
        ..., alias="credentials~attach", description="Credential attachments"
    )
    formats: List[V20CredFormat] = Field(
        ..., description="Acceptable attachment formats"
    )
    replacement_id: Optional[str] = Field(
        None,
        description="Issuer-unique identifier to coordinate credential replacement",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )


class V20CredOffer(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        example="https://didcomm.org/my-family/1.0/my-message-type",
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    credential_preview: Optional[V20CredPreview] = None
    formats: List[V20CredFormat] = Field(
        ..., description="Acceptable credential formats"
    )
    offers_attach: List[AttachDecorator] = Field(
        ..., alias="offers~attach", description="Offer attachments"
    )
    replacement_id: Optional[str] = Field(
        None,
        description="Issuer-unique identifier to coordinate credential replacement",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )


class V20CredProposal(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        example="https://didcomm.org/my-family/1.0/my-message-type",
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    credential_preview: Optional[V20CredPreview] = Field(
        None, description="Credential preview"
    )
    filters_attach: List[AttachDecorator] = Field(
        ...,
        alias="filters~attach",
        description="Credential filter per acceptable format on corresponding identifier",
    )
    formats: List[V20CredFormat] = Field(..., description="Attachment formats")


class V20CredRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        example="https://didcomm.org/my-family/1.0/my-message-type",
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    formats: List[V20CredFormat] = Field(
        ..., description="Acceptable attachment formats"
    )
    requests_attach: List[AttachDecorator] = Field(
        ..., alias="requests~attach", description="Request attachments"
    )


class V20Pres(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        example="https://didcomm.org/my-family/1.0/my-message-type",
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    formats: List[V20PresFormat] = Field(
        ..., description="Acceptable attachment formats"
    )
    presentations_attach: List[AttachDecorator] = Field(
        ..., alias="presentations~attach"
    )


class V20PresProposal(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        example="https://didcomm.org/my-family/1.0/my-message-type",
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    formats: List[V20PresFormat]
    proposals_attach: List[AttachDecorator] = Field(
        ...,
        alias="proposals~attach",
        description="Attachment per acceptable format on corresponding identifier",
    )


class V20PresProposalByFormat(BaseModel):
    class Config:
        allow_population_by_field_name = True

    dif: Optional[DIFProofProposal] = Field(
        None, description="Presentation proposal for DIF"
    )
    indy: Optional[IndyProofRequest] = Field(
        None, description="Presentation proposal for indy"
    )


class V20PresProposalRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    auto_present: Optional[bool] = Field(
        None,
        description="Whether to respond automatically to presentation requests, building and presenting requested proof",
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    connection_id: str = Field(
        ...,
        description="Connection identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    presentation_proposal: V20PresProposalByFormat
    trace: Optional[bool] = Field(
        None, description="Whether to trace event (default false)", example=False
    )


class V20PresRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: Optional[str] = Field(
        None,
        alias="@id",
        description="Message identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    type: Optional[str] = Field(
        None,
        alias="@type",
        description="Message type",
        example="https://didcomm.org/my-family/1.0/my-message-type",
    )
    comment: Optional[str] = Field(None, description="Human-readable comment")
    formats: List[V20PresFormat]
    request_presentations_attach: List[AttachDecorator] = Field(
        ...,
        alias="request_presentations~attach",
        description="Attachment per acceptable format on corresponding identifier",
    )
    will_confirm: Optional[bool] = Field(
        None, description="Whether verifier will send confirmation ack"
    )


class V20PresRequestByFormat(BaseModel):
    class Config:
        allow_population_by_field_name = True

    dif: Optional[DIFProofRequest] = Field(
        None, description="Presentation request for DIF"
    )
    indy: Optional[IndyProofRequest] = Field(
        None, description="Presentation request for indy"
    )


class V20PresSendRequestRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    auto_verify: Optional[bool] = Field(
        None,
        description="Verifier choice to auto-verify proof presentation",
        example=False,
    )
    comment: Optional[str] = None
    connection_id: str = Field(
        ...,
        description="Connection identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    presentation_request: V20PresRequestByFormat
    trace: Optional[bool] = Field(
        None, description="Whether to trace event (default false)", example=False
    )


class V20PresSpecByFormatRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    dif: Optional[DIFPresSpec] = Field(
        None,
        description="Optional Presentation specification for DIF, overrides the PresentionExchange record's PresRequest",
    )
    indy: Optional[IndyPresSpec] = Field(
        None, description="Presentation specification for indy"
    )
    trace: Optional[bool] = Field(
        None, description="Record trace information, based on agent configuration"
    )


class V20CredExRecord(BaseModel):
    class Config:
        allow_population_by_field_name = True

    auto_issue: Optional[bool] = Field(
        None,
        description="Issuer choice to issue to request in this credential exchange",
        example=False,
    )
    auto_offer: Optional[bool] = Field(
        None,
        description="Holder choice to accept offer in this credential exchange",
        example=False,
    )
    auto_remove: Optional[bool] = Field(
        None,
        description="Issuer choice to remove this credential exchange record when complete",
        example=False,
    )
    by_format: V20CredExRecordByFormat = Field(
        ...,
        description="Attachment content by format for proposal, offer, request, and issue",
    )
    connection_id: Optional[str] = Field(
        None,
        description="Connection identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    created_at: Optional[str] = Field(
        None,
        description="Time of record creation",
        example="2021-12-31 23:59:59+00:00",
        regex="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    cred_ex_id: str = Field(
        ...,
        description="Credential exchange identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    cred_issue: Optional[V20CredIssue] = Field(
        None, description="Serialized credential issue message"
    )
    cred_offer: Optional[V20CredOffer] = Field(
        None, description="Credential offer message"
    )
    cred_preview: Optional[V20CredPreview] = Field(
        None, description="Credential preview from credential proposal"
    )
    cred_proposal: Optional[V20CredProposal] = Field(
        None, description="Credential proposal message"
    )
    cred_request: Optional[V20CredRequest] = Field(
        None, description="Serialized credential request message"
    )
    error_msg: Optional[str] = Field(
        None, description="Error message", example="The front fell off"
    )
    initiator: Optional[Literal["self", "external"]] = Field(
        None,
        description="Issue-credential exchange initiator: self or external",
        example="self",
    )
    parent_thread_id: Optional[str] = Field(
        None,
        description="Parent thread identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    role: Optional[Literal["issuer", "holder"]] = Field(
        None,
        description="Issue-credential exchange role: holder or issuer",
        example="issuer",
    )
    state: Optional[
        Literal[
            "proposal-sent",
            "proposal-received",
            "offer-sent",
            "offer-received",
            "request-sent",
            "request-received",
            "credential-issued",
            "credential-received",
            "done",
            "credential-revoked",
            "abandoned",
            "deleted",
        ]
    ] = Field(None, description="Issue-credential exchange state", example="done")
    thread_id: Optional[str] = Field(
        None,
        description="Thread identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    trace: Optional[bool] = Field(
        None, description="Record trace information, based on agent configuration"
    )
    updated_at: Optional[str] = Field(
        None,
        description="Time of last record update",
        example="2021-12-31 23:59:59+00:00",
        regex="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )


class V20CredExRecordDetail(BaseModel):
    class Config:
        allow_population_by_field_name = True

    cred_ex_record: V20CredExRecord = Field(
        ..., description="Credential exchange record"
    )
    indy: Optional[V20CredExRecordIndy] = None
    ld_proof: Optional[V20CredExRecordLDProof] = None


class V20CredExRecordListResult(BaseModel):
    class Config:
        allow_population_by_field_name = True

    results: Optional[List[V20CredExRecordDetail]] = Field(
        None, description="Credential exchange records and corresponding detail records"
    )


class V20PresCreateRequestRequest(BaseModel):
    class Config:
        allow_population_by_field_name = True

    auto_verify: Optional[bool] = Field(
        None,
        description="Verifier choice to auto-verify proof presentation",
        example=False,
    )
    comment: Optional[str] = None
    presentation_request: V20PresRequestByFormat
    trace: Optional[bool] = Field(
        None, description="Whether to trace event (default false)", example=False
    )


class V20PresExRecord(BaseModel):
    class Config:
        allow_population_by_field_name = True

    auto_present: Optional[bool] = Field(
        None,
        description="Prover choice to auto-present proof as verifier requests",
        example=False,
    )
    auto_verify: Optional[bool] = Field(
        None, description="Verifier choice to auto-verify proof presentation"
    )
    by_format: Optional[V20PresExRecordByFormat] = Field(
        None,
        description="Attachment content by format for proposal, request, and presentation",
    )
    connection_id: Optional[str] = Field(
        None,
        description="Connection identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    created_at: Optional[str] = Field(
        None,
        description="Time of record creation",
        example="2021-12-31 23:59:59+00:00",
        regex="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    error_msg: Optional[str] = Field(
        None, description="Error message", example="Invalid structure"
    )
    initiator: Optional[Literal["self", "external"]] = Field(
        None,
        description="Present-proof exchange initiator: self or external",
        example="self",
    )
    pres: Optional[V20Pres] = Field(None, description="Presentation message")
    pres_ex_id: Optional[str] = Field(
        None,
        description="Presentation exchange identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    pres_proposal: Optional[V20PresProposal] = Field(
        None, description="Presentation proposal message"
    )
    pres_request: Optional[V20PresRequest] = Field(
        None, description="Presentation request message"
    )
    role: Optional[Literal["prover", "verifier"]] = Field(
        None,
        description="Present-proof exchange role: prover or verifier",
        example="prover",
    )
    state: Optional[
        Literal[
            "proposal-sent",
            "proposal-received",
            "request-sent",
            "request-received",
            "presentation-sent",
            "presentation-received",
            "done",
            "abandoned",
            "deleted",
        ]
    ] = Field(None, description="Present-proof exchange state")
    thread_id: Optional[str] = Field(
        None,
        description="Thread identifier",
        example="3fa85f64-5717-4562-b3fc-2c963f66afa6",
    )
    trace: Optional[bool] = Field(
        None, description="Record trace information, based on agent configuration"
    )
    updated_at: Optional[str] = Field(
        None,
        description="Time of last record update",
        example="2021-12-31 23:59:59+00:00",
        regex="^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
    )
    verified: Optional[Literal["true", "false"]] = Field(
        None,
        description="Whether presentation is verified: 'true' or 'false'",
        example="true",
    )
    verified_msgs: Optional[List[str]] = None


class V20PresExRecordList(BaseModel):
    class Config:
        allow_population_by_field_name = True

    results: List[V20PresExRecord] = Field(
        ..., description="Presentation exchange records"
    )
